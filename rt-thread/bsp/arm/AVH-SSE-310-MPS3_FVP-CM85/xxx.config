# Parameters:
# instance.parameter=value       #(type, mode) default = 'def value' : description : [min..max]
#------------------------------------------------------------------------------
NSC_CFG_0=0                                           # (bool  , init-time) default = '0'      : Whether 0x10000000..0x1FFFFFFF is non-secure-callable
NSC_CFG_1=0                                           # (bool  , init-time) default = '0'      : Whether 0x30000000..0x3FFFFFFF is non-secure-callable
REMOTE_CONNECTION.CADIServer.enable_remote_cadi=0     # (bool  , init-time) default = '0'      : Allow connections from remote hosts
REMOTE_CONNECTION.CADIServer.listen_address=127.0.0.1  # (string, init-time) default = '127.0.0.1' : If enable_remote_cadi is set, the network address the server listens on. The default is 127.0.0.1
REMOTE_CONNECTION.CADIServer.port=31627               # (int   , init-time) default = '0x7b8b' : If enable_remote_cadi is set, the TCP port the server listens on. The default is 31627
REMOTE_CONNECTION.CADIServer.range=0                  # (int   , init-time) default = '0x0'    : If the requested port is not available, search for the next available port in the range [port:port+range]. The default is zero, which means only try the requested port.
TRACE.UnpredArchMsg.enable=0                          # (bool  , init-time) default = '0'      : Enable automatic printing of unpredictable behaviour warnings
core0_bus_gasket.function=1                           # (int   , init-time) default = '0x1'    : Function: 0-none, 1-STL value-forcing
core0_bus_gasket.reg_base=3758221344                  # (int   , init-time) default = '0xe001e820' : Base Address of STL control regs (ADDR,VAL at offsets 0,4)
core0_bus_gasket.verbose=0                            # (int   , init-time) default = '0x0'    : Verbosity : 0-none, 1-some
cpu0.BEATS_PER_TICK=2                                 # (int   , init-time) default = '0x2'    : Number of beats from each in-flight vector instruction executed in 1 tick (1,2 or 4).
cpu0.BF_is_nop=0                                      # (bool  , init-time) default = '0'      : BF instruction executes as NOP, even if we have LO_BRANCH_INFO.
cpu0.CDEMAPPEDONCP=255                                # (int   , init-time) default = '0xff'   : Bit N specifies whether the instruction for coprocessor N (CP7:CP0) is redirected to the CDE module
cpu0.CDERTLID=32                                      # (int   , init-time) default = '0x20'   : Value of ID_AFR0.CDERTLID
cpu0.CFGBIGEND=0                                      # (bool  , init-time) default = '0'      : Initialize processor to big endian mode
cpu0.CFGCPUINST=0                                     # (int   , init-time) default = '0x0'    : CPU instance number. This is part of the TCM base address, in bits 25:24.
cpu0.CFGDTCMSZ=9                                      # (int   , init-time) default = '0x9'    : Size of the data TCM. 0=No DTCM implemented. Otherwise=Size of DTCM=pow(2, CFGDTCMSZ - 1) KB. Minimum size is 4KB
cpu0.CFGITCMSZ=9                                      # (int   , init-time) default = '0x9'    : Size of the instruction TCM. 0=No ITCM implemented. Otherwise=Size of ITCM=pow(2, CFGITCMSZ - 1) KB. Minimum size is 4KB
cpu0.CFGMEMALIAS=0                                    # (int   , init-time) default = '0x0'    : Memory address alias bit for the ITCM, DTCM and P-AHB regions. 0=No alias, 1=Alias bit 24, 2=Alias bit 25, 4=Alias bit 26, 8=Alias bit 27, 16=Alias bit 28
cpu0.CFGNOCDECP=0                                     # (int   , init-time) default = '0x0'    : Bit N means external coprocessor N (CP7:CP0) disable for CDE coprocessor
cpu0.CFGPAHBSZ=0                                      # (int   , init-time) default = '0x0'    : Size of the P-AHB peripheral port memory region. 0=P-AHB disabled, 1=64MB, 2=128MB, 3=256MB, 4=512MB
cpu0.CPIF=1                                           # (bool  , init-time) default = '1'      : Specifies whether the external coprocessor interface is included
cpu0.CPNSPRESENT=255                                  # (int   , init-time) default = '0xff'   : Bit N means external coprocessor N (CP7:CP0) is accessible in Non-Secure state
cpu0.CPSPRESENT=255                                   # (int   , init-time) default = '0xff'   : Bit N means external coprocessor N (CP7:CP0) is accessible in Secure state
cpu0.CTI=0                                            # (bool  , init-time) default = '0'      : CTI (Cross Trigger Interface) included
cpu0.CTI_irq0_pin=4                                   # (int   , init-time) default = '0x4'    : CTI interrupt request 0 pin
cpu0.CTI_irq1_pin=5                                   # (int   , init-time) default = '0x5'    : CTI interrupt request 1 pin
cpu0.DBGLVL=2                                         # (int   , init-time) default = '0x2'    : 1: 4 Watchpoints, 4 Breakpoint comparators; 2: 8 Watchpoints, 8 Breakpoint comparators
cpu0.DCACHESZ=15                                      # (int   , init-time) default = '0xf'    : Whether the D-cache is included and, if included, the size of it. Bit 0: 0=No D-cache included, 1=D-cache included. Bits [4:1]: 0x0=4KB D-cache, 0x1=8KB D-cache, 0x3=16KB D-cache, 0x7=32KB D-cache, 0xF=64KB D-cache
cpu0.DTGU=0                                           # (bool  , init-time) default = '0'      : DTCM Security Gate Unit included
cpu0.DTGUBLKSZ=3                                      # (int   , init-time) default = '0x3'    : DTCM gate unit block size. Size=pow(2, DTGUBLKSZ + 5) bytes
cpu0.DTGUMAXBLKS=0                                    # (int   , init-time) default = '0x0'    : Maximum number of DTCM gate unit blocks. Number of blocks=pow(2, DTGUMAXBLKS)
cpu0.ECOREVNUM=0                                      # (int   , init-time) default = '0x0'    : ECO Revision number
cpu0.ERRDEVID.NUM=1                                   # (int   , init-time) default = '0x1'    : RAS: Number of implemented error record indexes, 0 to 1.
cpu0.ETM=1                                            # (bool  , init-time) default = '1'      : Support for ETM trace. false : No ETM trace included, true: ETM trace included
cpu0.FPU=1                                            # (bool  , init-time) default = '1'      : Set whether the model has VFP support
cpu0.ICACHESZ=15                                      # (int   , init-time) default = '0xf'    : Whether the I-cache is included and, if included, the size of it. Bit 0: 0=No I-cache included, 1=I-cache included. Bits [4:1]: 0x0=4KB I-cache, 0x1=8KB I-cache, 0x3=16KB I-cache, 0x7=32KB I-cache, 0xF=64KB I-cache
cpu0.ID_ISAR0.CmpBranch=3                             # (int   , init-time) default = '0x3'    : Support for Compare and Branch instructions. 1 = Supports CBNZ and CBZ instructions; 3 = Supports non-predicated low overhead looping (WLS, DLS, LE, and LC) and branch future (BF, BFX, BFL, BFLX, and BFCSEL) instructions.
cpu0.ID_ISAR5.PACBTI=0                                # (int   , init-time) default = '0x0'    : 0: PAC/BTI not implemented, 1: PAC implemented using the QARMA5 algorithm with BTI, 2: PAC implemented using an IMP DEF algorithm with BTI, 4: PAC implemented using the QARMA3 algorithm with BTI
cpu0.INITNSVTOR=0                                     # (int   , init-time) default = '0x0'    : Non-Secure vector-table offset at reset
cpu0.INITPAHBEN=0                                     # (bool  , init-time) default = '0'      : The P-AHB enable state at reset
cpu0.INITSVTOR=268435456                              # (int   , init-time) default = '0x10000000' : Secure vector-table offset at reset
cpu0.INITTCMEN=3                                      # (int   , init-time) default = '0x3'    : The TCM enable state at reset. Bit 0 corresponds to ITCM enable state, bit 1 corresponds to DTCM enable state
cpu0.IRQDIS0=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+0]
cpu0.IRQDIS1=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+32]
cpu0.IRQDIS10=0                                       # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+320]
cpu0.IRQDIS11=0                                       # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+352]
cpu0.IRQDIS12=0                                       # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+384]
cpu0.IRQDIS13=0                                       # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+416]
cpu0.IRQDIS14=0                                       # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+448]
cpu0.IRQDIS2=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+64]
cpu0.IRQDIS3=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+96]
cpu0.IRQDIS4=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+128]
cpu0.IRQDIS5=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+160]
cpu0.IRQDIS6=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+192]
cpu0.IRQDIS7=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+224]
cpu0.IRQDIS8=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+256]
cpu0.IRQDIS9=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+288]
cpu0.IRQLVL=3                                         # (int   , init-time) default = '0x3'    : Number of bits of interrupt priority
cpu0.ITGU=0                                           # (bool  , init-time) default = '0'      : ITCM Security Gate Unit included
cpu0.ITGUBLKSZ=3                                      # (int   , init-time) default = '0x3'    : ITCM gate unit block size. Size=pow(2, ITGUBLKSZ + 5) bytes
cpu0.ITGUMAXBLKS=0                                    # (int   , init-time) default = '0x0'    : Maximum number of ITCM gate unit blocks. Number of blocks=pow(2, ITGUMAXBLKS)
cpu0.ITM=1                                            # (bool  , init-time) default = '1'      : Level of instrumentation trace supported. false : No ITM trace included, true: ITM trace included
cpu0.IWIC=1                                           # (bool  , init-time) default = '1'      : Include support for Internal Wake-up Interrupt Controller
cpu0.LOCKDTGU=0                                       # (bool  , init-time) default = '0'      : Lock down of Data TGU registers write
cpu0.LOCKITGU=0                                       # (bool  , init-time) default = '0'      : Lock down of Instruction TGU registers write
cpu0.LOCKTCM=0                                        # (bool  , init-time) default = '0'      : Lock down of TCM registers write
cpu0.LOCK_NS_MPU=0                                    # (bool  , init-time) default = '0'      : Lock down of Non-Secure MPU registers write
cpu0.LOCK_SAU=0                                       # (bool  , init-time) default = '0'      : Lock down of SAU registers write
cpu0.LOCK_S_MPU=0                                     # (bool  , init-time) default = '0'      : Lock down of Secure MPU registers write
cpu0.MPU_NS=8                                         # (int   , init-time) default = '0x8'    : Number of regions in the Non-Secure MPU. If Security Extensions are absent, this is the total number of MPU regions
cpu0.MPU_S=8                                          # (int   , init-time) default = '0x8'    : Number of regions in the Secure MPU. If Security Extensions are absent, this is ignored
cpu0.MVE=1                                            # (int   , init-time) default = '0x1'    : Set whether the model has MVE support. If FPU = 0: 0=MVE not included, 1=Integer subset of MVE included. If FPU = 1: 0=MVE not included, 1=Integer subset of MVE included, 2=Integer and half and single precision floating point MVE included
cpu0.SAU=8                                            # (int   , init-time) default = '0x8'    : Number of SAU regions (0 => no SAU)
cpu0.SECEXT=1                                         # (bool  , init-time) default = '1'      : Whether the ARMv8-M Security Extensions are included
cpu0.WICLINES=35                                      # (int   , init-time) default = '0x23'   : Number of lines supported by the WIC interface
cpu0.aircr_iesb_is_writable=1                         # (bool  , init-time) default = '1'      : IS the AIRCR.IESB bit [5] writable?
cpu0.aircr_iesb_reset=0                               # (bool  , init-time) default = '0'      : Set the AIRCR.IESB bit [5] after reset
cpu0.cde_impl_name=                                   # (string, init-time) default = ''       : Name of the CDE implementation for this core (implementation contributed by MTI plugin).
cpu0.cpi_div=1                                        # (int   , run-time ) default = '0x1'    : divider for calculating CPI (Cycles Per Instruction)
cpu0.cpi_mul=1                                        # (int   , run-time ) default = '0x1'    : multiplier for calculating CPI (Cycles Per Instruction)
cpu0.dcache-state_modelled=0                          # (bool  , run-time ) default = '0'      : Set whether D-cache has stateful implementation
cpu0.dcache-ways=4                                    # (int   , init-time) default = '0x4'    : L1 D-cache ways (sets are implicit from size)
cpu0.delay_faultmask_update=0                         # (bool  , init-time) default = '0'      : Delay FAULTMASK update to context sync
cpu0.delay_sysreg_update=0                            # (bool  , init-time) default = '0'      : Delay some system register updates (e.g. SHCSR) to context sync
cpu0.duplicate_CADI_TCM_writes=0                      # (bool  , init-time) default = '0'      : CADI writes to TCMs are also sent to downstream memory at same addresses (for validation platforms)
cpu0.ecc_on=0                                         # (bool  , init-time) default = '0'      : Enable Error Correcting Code
cpu0.execute_via_archex=1                             # (bool  , init-time) default = '1'      : Use ArchEx-generated code from V8_2_ALPHA2_JAN_2023_RELEASE_NO_AUTOGEN for execution
cpu0.has_cde=0                                        # (bool  , init-time) default = '0'      : Enables Custom Datapath Extensions
cpu0.has_core_dside_bus_gasket=0                      # (bool  , init-time) default = '0'      : Divert Core D-side transactions via core_dside_bus_gasket_* ports
cpu0.has_unpriviledged_debug=1                        # (bool  , init-time) default = '1'      : Unprivileged Debug Extension supported for Mainline Extension
cpu0.icache-state_modelled=0                          # (bool  , run-time ) default = '0'      : Set whether I-cache has stateful implementation
cpu0.icache-ways=2                                    # (int   , init-time) default = '0x2'    : L1 I-cache ways (sets are implicit from size)
cpu0.min_sync_level=0                                 # (int   , run-time ) default = '0x0'    : force minimum syncLevel (0=off=default,1=syncState,2=postInsnIO,3=postInsnAll)
cpu0.mve_unpred_config_json='[["OK","VMINNMV_f_T2","Rda==11x1"],["OK","VDDUP","curOffset MOD imm32 != 0"],["OK","VDDUP","bufSize   MOD imm32 != 0"],["OK","VDDUP","curOffset >= bufSize    "]]'  # (string, init-time) default = ''[["OK","VMINNMV_f_T2","Rda==11x1"],["OK","VDDUP","curOffset MOD imm32 != 0"],["OK","VDDUP","bufSize   MOD imm32 != 0"],["OK","VDDUP","curOffset >= bufSize    "]]'' : A JSON array of arrays of the form  [unpred_result, instr, cond] for unpredictable configuration for MVE. Either instr or cond may be omitted. The first match wins. Use 'list' to show the available options
cpu0.num_pmu_counters=31                              # (int   , init-time) default = '0x1f'   : Number of available PMU counters.
cpu0.ras_ERRFR0='{"ED":0x1,"UE":0x1}'                 # (string, init-time) default = ''{"ED":0x1,"UE":0x1}'' : A JSON object or array of objects for each field of ERRFR. Records not described default to RAZ e.g. '{"ED":0x1,"UE":0x1}'.
cpu0.ras_cei_pin=2                                    # (int   , init-time) default = '0x2'    : RAS: Critical error interrupt pin.
cpu0.ras_cei_support=1                                # (bool  , init-time) default = '1'      : RAS: Whether Critical Error Interrupt is supported
cpu0.ras_eri_pin=1                                    # (int   , init-time) default = '0x1'    : RAS: Error recovery interrupt pin.
cpu0.ras_eri_support=1                                # (bool  , init-time) default = '1'      : RAS: Whether Error Recovery Interrupt is supported
cpu0.ras_error_record=1                               # (int   , init-time) default = '0x1'    : 1 bit value that specifies which nodes out of 0-1 are implemented (ERRDEVID is derived from this parameter)
cpu0.ras_fhi_pin=0                                    # (int   , init-time) default = '0x0'    : RAS: Fault handling interrupt pin.
cpu0.ras_fhi_support=1                                # (bool  , init-time) default = '1'      : RAS: Whether Fault Handling Interrupt is supported
cpu0.scheduler_mode=0                                 # (int   , init-time) default = '0x0'    : Control the interleaving of instructions in this processor (0=default long quantum, 1=low latency mode, short quantum and signal checking, 2=lock-breaking mode, long quantum with additional context switches near load-exclusive instructions, 3=ISSCompare) WARNING: This parameter is intended for validation purposes and may result in unwanted behaviour if altered!
cpu0.semihosting-Thumb_SVC=171                        # (int   , init-time) default = '0xab'   : T32 SVC number for semihosting
cpu0.semihosting-cmd_line=                            # (string, init-time) default = ''       : Command line available to semihosting SVC calls
cpu0.semihosting-cwd=                                 # (string, init-time) default = ''       : Base directory for semihosting file access.
cpu0.semihosting-enable=1                             # (bool  , init-time) default = '1'      : Enable semihosting SVC traps. Applications that do not use semihosting must set this parameter to false.
cpu0.semihosting-heap_base=0                          # (int   , init-time) default = '0x0'    : Virtual address of heap base
cpu0.semihosting-heap_limit=544210944                 # (int   , init-time) default = '0x20700000' : Virtual address of top of heap
cpu0.semihosting-prefix=0                             # (bool  , init-time) default = '0'      : Prefix semihosting output with target instance name
cpu0.semihosting-stack_base=545259520                 # (int   , init-time) default = '0x20800000' : Virtual address of base of descending stack
cpu0.semihosting-stack_limit=544210944                # (int   , init-time) default = '0x20700000' : Virtual address of stack limit
cpu0.tcm_cadi_accesses_are_physical=0                 # (bool  , init-time) default = '0'      : CADI accesses to TCMs ignore any alias regions configured (for validation platforms)
cpu0.tcm_fill_pattern_1=3755990991                    # (int   , init-time) default = '0xdfdfdfcf' : TCM Fill pattern 1
cpu0.tcm_fill_pattern_2=3487555551                    # (int   , init-time) default = '0xcfdfdfdf' : TCM Fill pattern 2
cpu0.trace_style=0                                    # (int   , init-time) default = '0x0'    : MVE instruction trace style: 0=Tarmac-like from instDB.json, 1=execute function+params (for debug), 2 = Rosetta. Add 16 for [**--] beat trace. Add 32 for tracing IMPLIED LOB instructions. Add 64 to change opcode of implied BF to 0xBF00
cpu0.unpred_config_json_file=                         # (string, init-time) default = ''       : Path to the unpredictable configuration file in JSON format
cpu0.vfp-enable_at_reset=0                            # (bool  , init-time) default = '0'      : Enable VFP in CPACR, CPPWR, NSACR at reset. Warning: Arm recommends going through the implementation's suggested VFP power-up sequence!
cpu1.BEATS_PER_TICK=2                                 # (int   , init-time) default = '0x2'    : Number of beats from each in-flight vector instruction executed in 1 tick (1,2 or 4).
cpu1.BF_is_nop=0                                      # (bool  , init-time) default = '0'      : BF instruction executes as NOP, even if we have LO_BRANCH_INFO.
cpu1.CDEMAPPEDONCP=255                                # (int   , init-time) default = '0xff'   : Bit N specifies whether the instruction for coprocessor N (CP7:CP0) is redirected to the CDE module
cpu1.CDERTLID=32                                      # (int   , init-time) default = '0x20'   : Value of ID_AFR0.CDERTLID
cpu1.CFGBIGEND=0                                      # (bool  , init-time) default = '0'      : Initialize processor to big endian mode
cpu1.CFGCPUINST=0                                     # (int   , init-time) default = '0x0'    : CPU instance number. This is part of the TCM base address, in bits 25:24.
cpu1.CFGDTCMSZ=9                                      # (int   , init-time) default = '0x9'    : Size of the data TCM. 0=No DTCM implemented. Otherwise=Size of DTCM=pow(2, CFGDTCMSZ - 1) KB. Minimum size is 4KB
cpu1.CFGITCMSZ=9                                      # (int   , init-time) default = '0x9'    : Size of the instruction TCM. 0=No ITCM implemented. Otherwise=Size of ITCM=pow(2, CFGITCMSZ - 1) KB. Minimum size is 4KB
cpu1.CFGMEMALIAS=0                                    # (int   , init-time) default = '0x0'    : Memory address alias bit for the ITCM, DTCM and P-AHB regions. 0=No alias, 1=Alias bit 24, 2=Alias bit 25, 4=Alias bit 26, 8=Alias bit 27, 16=Alias bit 28
cpu1.CFGNOCDECP=0                                     # (int   , init-time) default = '0x0'    : Bit N means external coprocessor N (CP7:CP0) disable for CDE coprocessor
cpu1.CFGPAHBSZ=0                                      # (int   , init-time) default = '0x0'    : Size of the P-AHB peripheral port memory region. 0=P-AHB disabled, 1=64MB, 2=128MB, 3=256MB, 4=512MB
cpu1.CPIF=1                                           # (bool  , init-time) default = '1'      : Specifies whether the external coprocessor interface is included
cpu1.CPNSPRESENT=255                                  # (int   , init-time) default = '0xff'   : Bit N means external coprocessor N (CP7:CP0) is accessible in Non-Secure state
cpu1.CPSPRESENT=255                                   # (int   , init-time) default = '0xff'   : Bit N means external coprocessor N (CP7:CP0) is accessible in Secure state
cpu1.CTI=0                                            # (bool  , init-time) default = '0'      : CTI (Cross Trigger Interface) included
cpu1.CTI_irq0_pin=4                                   # (int   , init-time) default = '0x4'    : CTI interrupt request 0 pin
cpu1.CTI_irq1_pin=5                                   # (int   , init-time) default = '0x5'    : CTI interrupt request 1 pin
cpu1.DBGLVL=2                                         # (int   , init-time) default = '0x2'    : 1: 4 Watchpoints, 4 Breakpoint comparators; 2: 8 Watchpoints, 8 Breakpoint comparators
cpu1.DCACHESZ=15                                      # (int   , init-time) default = '0xf'    : Whether the D-cache is included and, if included, the size of it. Bit 0: 0=No D-cache included, 1=D-cache included. Bits [4:1]: 0x0=4KB D-cache, 0x1=8KB D-cache, 0x3=16KB D-cache, 0x7=32KB D-cache, 0xF=64KB D-cache
cpu1.DTGU=0                                           # (bool  , init-time) default = '0'      : DTCM Security Gate Unit included
cpu1.DTGUBLKSZ=3                                      # (int   , init-time) default = '0x3'    : DTCM gate unit block size. Size=pow(2, DTGUBLKSZ + 5) bytes
cpu1.DTGUMAXBLKS=0                                    # (int   , init-time) default = '0x0'    : Maximum number of DTCM gate unit blocks. Number of blocks=pow(2, DTGUMAXBLKS)
cpu1.ECOREVNUM=0                                      # (int   , init-time) default = '0x0'    : ECO Revision number
cpu1.ERRDEVID.NUM=1                                   # (int   , init-time) default = '0x1'    : RAS: Number of implemented error record indexes, 0 to 1.
cpu1.ETM=1                                            # (bool  , init-time) default = '1'      : Support for ETM trace. false : No ETM trace included, true: ETM trace included
cpu1.FPU=1                                            # (bool  , init-time) default = '1'      : Set whether the model has VFP support
cpu1.ICACHESZ=15                                      # (int   , init-time) default = '0xf'    : Whether the I-cache is included and, if included, the size of it. Bit 0: 0=No I-cache included, 1=I-cache included. Bits [4:1]: 0x0=4KB I-cache, 0x1=8KB I-cache, 0x3=16KB I-cache, 0x7=32KB I-cache, 0xF=64KB I-cache
cpu1.ID_ISAR0.CmpBranch=3                             # (int   , init-time) default = '0x3'    : Support for Compare and Branch instructions. 1 = Supports CBNZ and CBZ instructions; 3 = Supports non-predicated low overhead looping (WLS, DLS, LE, and LC) and branch future (BF, BFX, BFL, BFLX, and BFCSEL) instructions.
cpu1.ID_ISAR5.PACBTI=0                                # (int   , init-time) default = '0x0'    : 0: PAC/BTI not implemented, 1: PAC implemented using the QARMA5 algorithm with BTI, 2: PAC implemented using an IMP DEF algorithm with BTI, 4: PAC implemented using the QARMA3 algorithm with BTI
cpu1.INITNSVTOR=0                                     # (int   , init-time) default = '0x0'    : Non-Secure vector-table offset at reset
cpu1.INITPAHBEN=0                                     # (bool  , init-time) default = '0'      : The P-AHB enable state at reset
cpu1.INITSVTOR=268435456                              # (int   , init-time) default = '0x10000000' : Secure vector-table offset at reset
cpu1.INITTCMEN=3                                      # (int   , init-time) default = '0x3'    : The TCM enable state at reset. Bit 0 corresponds to ITCM enable state, bit 1 corresponds to DTCM enable state
cpu1.IRQDIS0=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+0]
cpu1.IRQDIS1=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+32]
cpu1.IRQDIS10=0                                       # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+320]
cpu1.IRQDIS11=0                                       # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+352]
cpu1.IRQDIS12=0                                       # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+384]
cpu1.IRQDIS13=0                                       # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+416]
cpu1.IRQDIS14=0                                       # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+448]
cpu1.IRQDIS2=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+64]
cpu1.IRQDIS3=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+96]
cpu1.IRQDIS4=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+128]
cpu1.IRQDIS5=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+160]
cpu1.IRQDIS6=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+192]
cpu1.IRQDIS7=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+224]
cpu1.IRQDIS8=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+256]
cpu1.IRQDIS9=0                                        # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n+288]
cpu1.IRQLVL=3                                         # (int   , init-time) default = '0x3'    : Number of bits of interrupt priority
cpu1.ITGU=0                                           # (bool  , init-time) default = '0'      : ITCM Security Gate Unit included
cpu1.ITGUBLKSZ=3                                      # (int   , init-time) default = '0x3'    : ITCM gate unit block size. Size=pow(2, ITGUBLKSZ + 5) bytes
cpu1.ITGUMAXBLKS=0                                    # (int   , init-time) default = '0x0'    : Maximum number of ITCM gate unit blocks. Number of blocks=pow(2, ITGUMAXBLKS)
cpu1.ITM=1                                            # (bool  , init-time) default = '1'      : Level of instrumentation trace supported. false : No ITM trace included, true: ITM trace included
cpu1.IWIC=1                                           # (bool  , init-time) default = '1'      : Include support for Internal Wake-up Interrupt Controller
cpu1.LOCKDTGU=0                                       # (bool  , init-time) default = '0'      : Lock down of Data TGU registers write
cpu1.LOCKITGU=0                                       # (bool  , init-time) default = '0'      : Lock down of Instruction TGU registers write
cpu1.LOCKTCM=0                                        # (bool  , init-time) default = '0'      : Lock down of TCM registers write
cpu1.LOCK_NS_MPU=0                                    # (bool  , init-time) default = '0'      : Lock down of Non-Secure MPU registers write
cpu1.LOCK_SAU=0                                       # (bool  , init-time) default = '0'      : Lock down of SAU registers write
cpu1.LOCK_S_MPU=0                                     # (bool  , init-time) default = '0'      : Lock down of Secure MPU registers write
cpu1.MPU_NS=8                                         # (int   , init-time) default = '0x8'    : Number of regions in the Non-Secure MPU. If Security Extensions are absent, this is the total number of MPU regions
cpu1.MPU_S=8                                          # (int   , init-time) default = '0x8'    : Number of regions in the Secure MPU. If Security Extensions are absent, this is ignored
cpu1.MVE=1                                            # (int   , init-time) default = '0x1'    : Set whether the model has MVE support. If FPU = 0: 0=MVE not included, 1=Integer subset of MVE included. If FPU = 1: 0=MVE not included, 1=Integer subset of MVE included, 2=Integer and half and single precision floating point MVE included
cpu1.SAU=8                                            # (int   , init-time) default = '0x8'    : Number of SAU regions (0 => no SAU)
cpu1.SECEXT=1                                         # (bool  , init-time) default = '1'      : Whether the ARMv8-M Security Extensions are included
cpu1.WICLINES=35                                      # (int   , init-time) default = '0x23'   : Number of lines supported by the WIC interface
cpu1.aircr_iesb_is_writable=1                         # (bool  , init-time) default = '1'      : IS the AIRCR.IESB bit [5] writable?
cpu1.aircr_iesb_reset=0                               # (bool  , init-time) default = '0'      : Set the AIRCR.IESB bit [5] after reset
cpu1.cde_impl_name=                                   # (string, init-time) default = ''       : Name of the CDE implementation for this core (implementation contributed by MTI plugin).
cpu1.cpi_div=1                                        # (int   , run-time ) default = '0x1'    : divider for calculating CPI (Cycles Per Instruction)
cpu1.cpi_mul=1                                        # (int   , run-time ) default = '0x1'    : multiplier for calculating CPI (Cycles Per Instruction)
cpu1.dcache-state_modelled=0                          # (bool  , run-time ) default = '0'      : Set whether D-cache has stateful implementation
cpu1.dcache-ways=4                                    # (int   , init-time) default = '0x4'    : L1 D-cache ways (sets are implicit from size)
cpu1.delay_faultmask_update=0                         # (bool  , init-time) default = '0'      : Delay FAULTMASK update to context sync
cpu1.delay_sysreg_update=0                            # (bool  , init-time) default = '0'      : Delay some system register updates (e.g. SHCSR) to context sync
cpu1.duplicate_CADI_TCM_writes=0                      # (bool  , init-time) default = '0'      : CADI writes to TCMs are also sent to downstream memory at same addresses (for validation platforms)
cpu1.ecc_on=0                                         # (bool  , init-time) default = '0'      : Enable Error Correcting Code
cpu1.execute_via_archex=1                             # (bool  , init-time) default = '1'      : Use ArchEx-generated code from V8_2_ALPHA2_JAN_2023_RELEASE_NO_AUTOGEN for execution
cpu1.has_cde=0                                        # (bool  , init-time) default = '0'      : Enables Custom Datapath Extensions
cpu1.has_core_dside_bus_gasket=0                      # (bool  , init-time) default = '0'      : STL gasket enabled
cpu1.has_unpriviledged_debug=1                        # (bool  , init-time) default = '1'      : Unprivileged Debug Extension supported for Mainline Extension
cpu1.icache-state_modelled=0                          # (bool  , run-time ) default = '0'      : Set whether I-cache has stateful implementation
cpu1.icache-ways=2                                    # (int   , init-time) default = '0x2'    : L1 I-cache ways (sets are implicit from size)
cpu1.min_sync_level=0                                 # (int   , run-time ) default = '0x0'    : force minimum syncLevel (0=off=default,1=syncState,2=postInsnIO,3=postInsnAll)
cpu1.mve_unpred_config_json='[["OK","VMINNMV_f_T2","Rda==11x1"],["OK","VDDUP","curOffset MOD imm32 != 0"],["OK","VDDUP","bufSize   MOD imm32 != 0"],["OK","VDDUP","curOffset >= bufSize    "]]'  # (string, init-time) default = ''[["OK","VMINNMV_f_T2","Rda==11x1"],["OK","VDDUP","curOffset MOD imm32 != 0"],["OK","VDDUP","bufSize   MOD imm32 != 0"],["OK","VDDUP","curOffset >= bufSize    "]]'' : A JSON array of arrays of the form  [unpred_result, instr, cond] for unpredictable configuration for MVE. Either instr or cond may be omitted. The first match wins. Use 'list' to show the available options
cpu1.num_pmu_counters=31                              # (int   , init-time) default = '0x1f'   : Number of available PMU counters.
cpu1.ras_ERRFR0='{"ED":0x1,"UE":0x1}'                 # (string, init-time) default = ''{"ED":0x1,"UE":0x1}'' : A JSON object or array of objects for each field of ERRFR. Records not described default to RAZ e.g. '{"ED":0x1,"UE":0x1}'.
cpu1.ras_cei_pin=2                                    # (int   , init-time) default = '0x2'    : RAS: Critical error interrupt pin.
cpu1.ras_cei_support=1                                # (bool  , init-time) default = '1'      : RAS: Whether Critical Error Interrupt is supported
cpu1.ras_eri_pin=1                                    # (int   , init-time) default = '0x1'    : RAS: Error recovery interrupt pin.
cpu1.ras_eri_support=1                                # (bool  , init-time) default = '1'      : RAS: Whether Error Recovery Interrupt is supported
cpu1.ras_error_record=1                               # (int   , init-time) default = '0x1'    : 1 bit value that specifies which nodes out of 0-1 are implemented (ERRDEVID is derived from this parameter)
cpu1.ras_fhi_pin=0                                    # (int   , init-time) default = '0x0'    : RAS: Fault handling interrupt pin.
cpu1.ras_fhi_support=1                                # (bool  , init-time) default = '1'      : RAS: Whether Fault Handling Interrupt is supported
cpu1.scheduler_mode=0                                 # (int   , init-time) default = '0x0'    : Control the interleaving of instructions in this processor (0=default long quantum, 1=low latency mode, short quantum and signal checking, 2=lock-breaking mode, long quantum with additional context switches near load-exclusive instructions, 3=ISSCompare) WARNING: This parameter is intended for validation purposes and may result in unwanted behaviour if altered!
cpu1.semihosting-Thumb_SVC=171                        # (int   , init-time) default = '0xab'   : T32 SVC number for semihosting
cpu1.semihosting-cmd_line=                            # (string, init-time) default = ''       : Command line available to semihosting SVC calls
cpu1.semihosting-cwd=                                 # (string, init-time) default = ''       : Base directory for semihosting file access.
cpu1.semihosting-enable=1                             # (bool  , init-time) default = '1'      : Enable semihosting SVC traps. Applications that do not use semihosting must set this parameter to false.
cpu1.semihosting-heap_base=0                          # (int   , init-time) default = '0x0'    : Virtual address of heap base
cpu1.semihosting-heap_limit=544210944                 # (int   , init-time) default = '0x20700000' : Virtual address of top of heap
cpu1.semihosting-prefix=0                             # (bool  , init-time) default = '0'      : Prefix semihosting output with target instance name
cpu1.semihosting-stack_base=545259520                 # (int   , init-time) default = '0x20800000' : Virtual address of base of descending stack
cpu1.semihosting-stack_limit=544210944                # (int   , init-time) default = '0x20700000' : Virtual address of stack limit
cpu1.tcm_cadi_accesses_are_physical=0                 # (bool  , init-time) default = '0'      : CADI accesses to TCMs ignore any alias regions configured (for validation platforms)
cpu1.tcm_fill_pattern_1=3755990991                    # (int   , init-time) default = '0xdfdfdfcf' : TCM Fill pattern 1
cpu1.tcm_fill_pattern_2=3487555551                    # (int   , init-time) default = '0xcfdfdfdf' : TCM Fill pattern 2
cpu1.trace_style=0                                    # (int   , init-time) default = '0x0'    : MVE instruction trace style: 0=Tarmac-like from instDB.json, 1=execute function+params (for debug), 2 = Rosetta. Add 16 for [**--] beat trace. Add 32 for tracing IMPLIED LOB instructions. Add 64 to change opcode of implied BF to 0xBF00
cpu1.unpred_config_json_file=                         # (string, init-time) default = ''       : Path to the unpredictable configuration file in JSON format
cpu1.vfp-enable_at_reset=0                            # (bool  , init-time) default = '0'      : Enable VFP in CPACR, CPPWR, NSACR at reset. Warning: Arm recommends going through the implementation's suggested VFP power-up sequence!
fvp_mps2.AHBPPCEXP_DIS0=0                             # (int   , init-time) default = '0x0'    : Disables support for individual bits on the AHBNSPPCEXP0 and AHBPPPCEXP0 buses
fvp_mps2.AHBPPCEXP_DIS1=0                             # (int   , init-time) default = '0x0'    : Disables support for individual bits on the AHBNSPPCEXP1 and AHBPPPCEXP1 buses
fvp_mps2.AHBPPCEXP_DIS2=0                             # (int   , init-time) default = '0x0'    : Disables support for individual bits on the AHBNSPPCEXP2 and AHBPPPCEXP2 buses
fvp_mps2.AHBPPCEXP_DIS3=0                             # (int   , init-time) default = '0x0'    : Disables support for individual bits on the AHBNSPPCEXP3 and AHBPPPCEXP3 buses
fvp_mps2.APBPPCEXP_DIS0=0                             # (int   , init-time) default = '0x0'    : Disables support for individual bits on the APBNSPPCEXP0 and APBPPPCEXP0 buses
fvp_mps2.APBPPCEXP_DIS1=0                             # (int   , init-time) default = '0x0'    : Disables support for individual bits on the APBNSPPCEXP1 and APBPPPCEXP1 buses
fvp_mps2.APBPPCEXP_DIS2=0                             # (int   , init-time) default = '0x0'    : Disables support for individual bits on the APBNSPPCEXP2 and APBPPPCEXP2 buses
fvp_mps2.APBPPCEXP_DIS3=0                             # (int   , init-time) default = '0x0'    : Disables support for individual bits on the APBNSPPCEXP3 and APBPPPCEXP3 buses
fvp_mps2.DISABLE_GATING=0                             # (bool  , init-time) default = '0'      : Disable Memory gating logic
fvp_mps2.GPIO_test_enable=0                           # (bool  , init-time) default = '0'      : Enable GPIO connection test
fvp_mps2.PSRAM.enable_atomic_ops=0                    # (bool  , init-time) default = '0'      : Supports Atomic Operations
fvp_mps2.PSRAM.fill1=3755990991                       # (int   , init-time) default = '0xdfdfdfcf' : Fill pattern 1, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.PSRAM.fill2=3487555551                       # (int   , init-time) default = '0xcfdfdfdf' : Fill pattern 2, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.PSRAM.size=4294967296                        # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.PSRAM_M7.enable_atomic_ops=0                 # (bool  , init-time) default = '0'      : Supports Atomic Operations
fvp_mps2.PSRAM_M7.fill1=3755990991                    # (int   , init-time) default = '0xdfdfdfcf' : Fill pattern 1, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.PSRAM_M7.fill2=3487555551                    # (int   , init-time) default = '0xcfdfdfdf' : Fill pattern 2, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.PSRAM_M7.size=4294967296                     # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.SCC_ID.Revision=1                            # (int   , init-time) default = '0x1'    : SCC_ID[3:0], Y in the FGPA version 'rXpY'
fvp_mps2.SCC_ID.Variant=0                             # (int   , init-time) default = '0x0'    : SCC_ID[23:20], X in the FGPA version 'rXpY'
fvp_mps2.UART0.clk_divider.div=1                      # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.UART0.clk_divider.mul=1                      # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.UART0.in_file=                               # (string, init-time) default = ''       : Input file for data to be read by the UART
fvp_mps2.UART0.in_file_escape_sequence=##             # (string, init-time) default = '##'     : Input file escape sequence
fvp_mps2.UART0.out_file=                              # (string, init-time) default = ''       : Output file to hold data written by the UART (use '-' to send all output to stdout)
fvp_mps2.UART0.rx_overrun_mode=2                      # (int   , init-time) default = '0x2'    : Block receive on RX_OVERRUN - 0:Never; 1:Before overrun; 2:After overrun
fvp_mps2.UART0.shutdown_on_eot=0                      # (bool  , init-time) default = '0'      : Shutdown simulation when a EOT (ASCII 4) char is transmitted (useful for regression tests when semihosting is not available)
fvp_mps2.UART0.shutdown_tag=                          # (string, run-time ) default = ''       : Shutdown simulation when a string is transmitted
fvp_mps2.UART0.unbuffered_output=0                    # (bool  , init-time) default = '0'      : Unbuffered output
fvp_mps2.UART1.clk_divider.div=1                      # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.UART1.clk_divider.mul=1                      # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.UART1.in_file=                               # (string, init-time) default = ''       : Input file for data to be read by the UART
fvp_mps2.UART1.in_file_escape_sequence=##             # (string, init-time) default = '##'     : Input file escape sequence
fvp_mps2.UART1.out_file=                              # (string, init-time) default = ''       : Output file to hold data written by the UART (use '-' to send all output to stdout)
fvp_mps2.UART1.rx_overrun_mode=2                      # (int   , init-time) default = '0x2'    : Block receive on RX_OVERRUN - 0:Never; 1:Before overrun; 2:After overrun
fvp_mps2.UART1.shutdown_on_eot=0                      # (bool  , init-time) default = '0'      : Shutdown simulation when a EOT (ASCII 4) char is transmitted (useful for regression tests when semihosting is not available)
fvp_mps2.UART1.shutdown_tag=                          # (string, run-time ) default = ''       : Shutdown simulation when a string is transmitted
fvp_mps2.UART1.unbuffered_output=0                    # (bool  , init-time) default = '0'      : Unbuffered output
fvp_mps2.UART2.clk_divider.div=1                      # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.UART2.clk_divider.mul=1                      # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.UART2.in_file=                               # (string, init-time) default = ''       : Input file for data to be read by the UART
fvp_mps2.UART2.in_file_escape_sequence=##             # (string, init-time) default = '##'     : Input file escape sequence
fvp_mps2.UART2.out_file=                              # (string, init-time) default = ''       : Output file to hold data written by the UART (use '-' to send all output to stdout)
fvp_mps2.UART2.rx_overrun_mode=2                      # (int   , init-time) default = '0x2'    : Block receive on RX_OVERRUN - 0:Never; 1:Before overrun; 2:After overrun
fvp_mps2.UART2.shutdown_on_eot=0                      # (bool  , init-time) default = '0'      : Shutdown simulation when a EOT (ASCII 4) char is transmitted (useful for regression tests when semihosting is not available)
fvp_mps2.UART2.shutdown_tag=                          # (string, run-time ) default = ''       : Shutdown simulation when a string is transmitted
fvp_mps2.UART2.unbuffered_output=0                    # (bool  , init-time) default = '0'      : Unbuffered output
fvp_mps2.ahb_ppc_iotss_expansion0.NONSEC_MASK=0       # (int   , init-time) default = '0x0'    : 16-bit wide mask for security checking of ports: 0 = check, 1 = mask
fvp_mps2.ahb_ppc_iotss_expansion0.diagnostics=0       # (int   , run-time ) default = '0x0'    : Diagnostics
fvp_mps2.ahb_ppc_iotss_expansion1.NONSEC_MASK=0       # (int   , init-time) default = '0x0'    : 16-bit wide mask for security checking of ports: 0 = check, 1 = mask
fvp_mps2.ahb_ppc_iotss_expansion1.diagnostics=0       # (int   , run-time ) default = '0x0'    : Diagnostics
fvp_mps2.apb_ppc_iotss_expansion0.NONSEC_MASK=0       # (int   , init-time) default = '0x0'    : 16-bit wide mask for security checking of ports: 0 = check, 1 = mask
fvp_mps2.apb_ppc_iotss_expansion0.diagnostics=0       # (int   , run-time ) default = '0x0'    : Diagnostics
fvp_mps2.apb_ppc_iotss_expansion1.NONSEC_MASK=0       # (int   , init-time) default = '0x0'    : 16-bit wide mask for security checking of ports: 0 = check, 1 = mask
fvp_mps2.apb_ppc_iotss_expansion1.diagnostics=0       # (int   , run-time ) default = '0x0'    : Diagnostics
fvp_mps2.apb_ppc_iotss_expansion2.NONSEC_MASK=0       # (int   , init-time) default = '0x0'    : 16-bit wide mask for security checking of ports: 0 = check, 1 = mask
fvp_mps2.apb_ppc_iotss_expansion2.diagnostics=0       # (int   , run-time ) default = '0x0'    : Diagnostics
fvp_mps2.clock50Hz.div=1                              # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.clockdivider.div=1                           # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.cmsdk_watchdog.simhalt=0                     # (bool  , run-time ) default = '0'      : Halt on reset.
fvp_mps2.dma0.activate_delay=0                        # (int   , init-time) default = '0x0'    : request delay
fvp_mps2.dma0.fifo_size=16                            # (int   , init-time) default = '0x10'   : Channel FIFO size in bytes
fvp_mps2.dma0.generate_clear=0                        # (bool  , init-time) default = '0'      : Generate clear response
fvp_mps2.dma0.max_transfer=256                        # (int   , init-time) default = '0x100'  : Largest atomic transfer
fvp_mps2.dma0_idau_labeller.diagnostics=0             # (int   , init-time) default = '0x0'    : Diagnostics
fvp_mps2.dma0_securitymodifier.behaviour_ns_to_s=0    # (int   , init-time) default = '0x0'    : Behaviour for NS transactions to S space : 0:block 1:transmit 2:convert to S
fvp_mps2.dma1.activate_delay=0                        # (int   , init-time) default = '0x0'    : request delay
fvp_mps2.dma1.fifo_size=16                            # (int   , init-time) default = '0x10'   : Channel FIFO size in bytes
fvp_mps2.dma1.generate_clear=0                        # (bool  , init-time) default = '0'      : Generate clear response
fvp_mps2.dma1.max_transfer=256                        # (int   , init-time) default = '0x100'  : Largest atomic transfer
fvp_mps2.dma1_idau_labeller.diagnostics=0             # (int   , init-time) default = '0x0'    : Diagnostics
fvp_mps2.dma1_securitymodifier.behaviour_ns_to_s=0    # (int   , init-time) default = '0x0'    : Behaviour for NS transactions to S space : 0:block 1:transmit 2:convert to S
fvp_mps2.dma2.activate_delay=0                        # (int   , init-time) default = '0x0'    : request delay
fvp_mps2.dma2.fifo_size=16                            # (int   , init-time) default = '0x10'   : Channel FIFO size in bytes
fvp_mps2.dma2.generate_clear=0                        # (bool  , init-time) default = '0'      : Generate clear response
fvp_mps2.dma2.max_transfer=256                        # (int   , init-time) default = '0x100'  : Largest atomic transfer
fvp_mps2.dma2_idau_labeller.diagnostics=0             # (int   , init-time) default = '0x0'    : Diagnostics
fvp_mps2.dma2_securitymodifier.behaviour_ns_to_s=0    # (int   , init-time) default = '0x0'    : Behaviour for NS transactions to S space : 0:block 1:transmit 2:convert to S
fvp_mps2.dma3.activate_delay=0                        # (int   , init-time) default = '0x0'    : request delay
fvp_mps2.dma3.fifo_size=16                            # (int   , init-time) default = '0x10'   : Channel FIFO size in bytes
fvp_mps2.dma3.generate_clear=0                        # (bool  , init-time) default = '0'      : Generate clear response
fvp_mps2.dma3.max_transfer=256                        # (int   , init-time) default = '0x100'  : Largest atomic transfer
fvp_mps2.dma3_idau_labeller.diagnostics=0             # (int   , init-time) default = '0x0'    : Diagnostics
fvp_mps2.dma3_securitymodifier.behaviour_ns_to_s=0    # (int   , init-time) default = '0x0'    : Behaviour for NS transactions to S space : 0:block 1:transmit 2:convert to S
fvp_mps2.exclusive_monitor_psram.apply_access_width_criteria_to_non_excl_stores=1  # (bool  , init-time) default = '1'      : Apply the given exclusive store width matching criteria to non-exclusive stores
fvp_mps2.exclusive_monitor_psram.clear_on_strex_address_mismatch=1  # (bool  , init-time) default = '1'      : Whether monitor is cleared when strex fails due to address mismatch
fvp_mps2.exclusive_monitor_psram.enable_component=1   # (bool  , init-time) default = '1'      : Enable component
fvp_mps2.exclusive_monitor_psram.exclusive_monitor_clear_on_atomic_from_same_master=1  # (bool  , init-time) default = '1'      : Monitor atomics from the same master
fvp_mps2.exclusive_monitor_psram.log2_granule_size=0  # (int   , init-time) default = '0x0'    : log2 of address granule size
fvp_mps2.exclusive_monitor_psram.match_secure_state=1  # (bool  , init-time) default = '1'      : Treat the secure state like an address bit
fvp_mps2.exclusive_monitor_psram.monitor_access_level=0  # (int   , init-time) default = '0x0'    : 0: Monitor all accesses, 1: Monitor all accesses except WriteBack, 2: Only monitor accesses with memory type NonCacheable or Device
fvp_mps2.exclusive_monitor_psram.monitor_non_excl_stores=0  # (bool  , init-time) default = '0'      : Monitor non-exclusive stores from the same master
fvp_mps2.exclusive_monitor_psram.number_of_monitors=8  # (int   , init-time) default = '0x8'    : Number of monitors
fvp_mps2.exclusive_monitor_psram.shareability_domain=3  # (int   , init-time) default = '0x3'    : Maximum shareability domain of interest, transactions outside of the domain will pass through un-monitored (0-non-shared, 1-inner, 2-outer, 3-system)
fvp_mps2.exclusive_monitor_psram_iotss.apply_access_width_criteria_to_non_excl_stores=1  # (bool  , init-time) default = '1'      : Apply the given exclusive store width matching criteria to non-exclusive stores
fvp_mps2.exclusive_monitor_psram_iotss.clear_on_strex_address_mismatch=1  # (bool  , init-time) default = '1'      : Whether monitor is cleared when strex fails due to address mismatch
fvp_mps2.exclusive_monitor_psram_iotss.enable_component=1  # (bool  , init-time) default = '1'      : Enable component
fvp_mps2.exclusive_monitor_psram_iotss.exclusive_monitor_clear_on_atomic_from_same_master=1  # (bool  , init-time) default = '1'      : Monitor atomics from the same master
fvp_mps2.exclusive_monitor_psram_iotss.log2_granule_size=0  # (int   , init-time) default = '0x0'    : log2 of address granule size
fvp_mps2.exclusive_monitor_psram_iotss.match_secure_state=1  # (bool  , init-time) default = '1'      : Treat the secure state like an address bit
fvp_mps2.exclusive_monitor_psram_iotss.monitor_access_level=0  # (int   , init-time) default = '0x0'    : 0: Monitor all accesses, 1: Monitor all accesses except WriteBack, 2: Only monitor accesses with memory type NonCacheable or Device
fvp_mps2.exclusive_monitor_psram_iotss.monitor_non_excl_stores=0  # (bool  , init-time) default = '0'      : Monitor non-exclusive stores from the same master
fvp_mps2.exclusive_monitor_psram_iotss.number_of_monitors=8  # (int   , init-time) default = '0x8'    : Number of monitors
fvp_mps2.exclusive_monitor_psram_iotss.shareability_domain=3  # (int   , init-time) default = '0x3'    : Maximum shareability domain of interest, transactions outside of the domain will pass through un-monitored (0-non-shared, 1-inner, 2-outer, 3-system)
fvp_mps2.exclusive_monitor_zbtsram1.apply_access_width_criteria_to_non_excl_stores=1  # (bool  , init-time) default = '1'      : Apply the given exclusive store width matching criteria to non-exclusive stores
fvp_mps2.exclusive_monitor_zbtsram1.clear_on_strex_address_mismatch=1  # (bool  , init-time) default = '1'      : Whether monitor is cleared when strex fails due to address mismatch
fvp_mps2.exclusive_monitor_zbtsram1.enable_component=1  # (bool  , init-time) default = '1'      : Enable component
fvp_mps2.exclusive_monitor_zbtsram1.exclusive_monitor_clear_on_atomic_from_same_master=1  # (bool  , init-time) default = '1'      : Monitor atomics from the same master
fvp_mps2.exclusive_monitor_zbtsram1.log2_granule_size=0  # (int   , init-time) default = '0x0'    : log2 of address granule size
fvp_mps2.exclusive_monitor_zbtsram1.match_secure_state=1  # (bool  , init-time) default = '1'      : Treat the secure state like an address bit
fvp_mps2.exclusive_monitor_zbtsram1.monitor_access_level=0  # (int   , init-time) default = '0x0'    : 0: Monitor all accesses, 1: Monitor all accesses except WriteBack, 2: Only monitor accesses with memory type NonCacheable or Device
fvp_mps2.exclusive_monitor_zbtsram1.monitor_non_excl_stores=0  # (bool  , init-time) default = '0'      : Monitor non-exclusive stores from the same master
fvp_mps2.exclusive_monitor_zbtsram1.number_of_monitors=8  # (int   , init-time) default = '0x8'    : Number of monitors
fvp_mps2.exclusive_monitor_zbtsram1.shareability_domain=3  # (int   , init-time) default = '0x3'    : Maximum shareability domain of interest, transactions outside of the domain will pass through un-monitored (0-non-shared, 1-inner, 2-outer, 3-system)
fvp_mps2.exclusive_monitor_zbtsram2.apply_access_width_criteria_to_non_excl_stores=1  # (bool  , init-time) default = '1'      : Apply the given exclusive store width matching criteria to non-exclusive stores
fvp_mps2.exclusive_monitor_zbtsram2.clear_on_strex_address_mismatch=1  # (bool  , init-time) default = '1'      : Whether monitor is cleared when strex fails due to address mismatch
fvp_mps2.exclusive_monitor_zbtsram2.enable_component=1  # (bool  , init-time) default = '1'      : Enable component
fvp_mps2.exclusive_monitor_zbtsram2.exclusive_monitor_clear_on_atomic_from_same_master=1  # (bool  , init-time) default = '1'      : Monitor atomics from the same master
fvp_mps2.exclusive_monitor_zbtsram2.log2_granule_size=0  # (int   , init-time) default = '0x0'    : log2 of address granule size
fvp_mps2.exclusive_monitor_zbtsram2.match_secure_state=1  # (bool  , init-time) default = '1'      : Treat the secure state like an address bit
fvp_mps2.exclusive_monitor_zbtsram2.monitor_access_level=0  # (int   , init-time) default = '0x0'    : 0: Monitor all accesses, 1: Monitor all accesses except WriteBack, 2: Only monitor accesses with memory type NonCacheable or Device
fvp_mps2.exclusive_monitor_zbtsram2.monitor_non_excl_stores=0  # (bool  , init-time) default = '0'      : Monitor non-exclusive stores from the same master
fvp_mps2.exclusive_monitor_zbtsram2.number_of_monitors=8  # (int   , init-time) default = '0x8'    : Number of monitors
fvp_mps2.exclusive_monitor_zbtsram2.shareability_domain=3  # (int   , init-time) default = '0x3'    : Maximum shareability domain of interest, transactions outside of the domain will pass through un-monitored (0-non-shared, 1-inner, 2-outer, 3-system)
fvp_mps2.expansion_warning_memory.abort_on_reads=0    # (bool  , init-time) default = '0'      : Generate Abort on reads
fvp_mps2.expansion_warning_memory.abort_on_writes=0   # (bool  , init-time) default = '0'      : Generate Abort on writes
fvp_mps2.expansion_warning_memory.diagnostics=2       # (int   , init-time) default = '0x2'    : Diagnostics 0-4 (0:FATAL 1:ERROR 2:WARNING 3:INFO 4:DEBUG - DEFAULT==2)
fvp_mps2.expansion_warning_memory.read_data=0         # (int   , init-time) default = '0x0'    : Data to return on reads, if not aborting
fvp_mps2.extra_psram_size=33554432                    # (int   , init-time) default = '0x2000000' : Size of extra PSRAM RAM for IOT,SSE-200 and  SVOS
fvp_mps2.hostbridge.interfaceName=                    # (string, init-time) default = ''       : Host Interface
fvp_mps2.hostbridge.userNetOptions=                   # (string, init-time) default = ''       : Control options for UserNet TCP/IP (for internal use only, please do not use)
fvp_mps2.hostbridge.userNetPorts=                     # (string, init-time) default = ''       : Listening ports to expose in user-mode networking
fvp_mps2.hostbridge.userNetSubnet=172.20.51.0/24      # (string, init-time) default = '172.20.51.0/24' : Virtual subnet for user-mode networking
fvp_mps2.hostbridge.userNetworking=0                  # (bool  , init-time) default = '0'      : Enable user-mode networking
fvp_mps2.iotss_systemcontrol.cpu0wait=0               # (bool  , init-time) default = '0'      : Whether to hold cpu0 in reset at boot
fvp_mps2.iotss_systemcontrol.cpu1wait=1               # (bool  , init-time) default = '1'      : Whether to hold cpu1 in reset at boot
fvp_mps2.is_m7=0                                      # (bool  , init-time) default = '0'      : Enable PSRAM_M7 if current core is M7
fvp_mps2.mps2_cmsdk_dualtimer.clk_div0.div=1          # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.mps2_cmsdk_dualtimer.clk_div0.mul=1          # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.mps2_cmsdk_dualtimer.clk_div1.div=1          # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.mps2_cmsdk_dualtimer.clk_div1.mul=1          # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.mps2_exclusive_monitor_zbtsram1.apply_access_width_criteria_to_non_excl_stores=1  # (bool  , init-time) default = '1'      : Apply the given exclusive store width matching criteria to non-exclusive stores
fvp_mps2.mps2_exclusive_monitor_zbtsram1.clear_on_strex_address_mismatch=1  # (bool  , init-time) default = '1'      : Whether monitor is cleared when strex fails due to address mismatch
fvp_mps2.mps2_exclusive_monitor_zbtsram1.enable_component=1  # (bool  , init-time) default = '1'      : Enable component
fvp_mps2.mps2_exclusive_monitor_zbtsram1.exclusive_monitor_clear_on_atomic_from_same_master=1  # (bool  , init-time) default = '1'      : Monitor atomics from the same master
fvp_mps2.mps2_exclusive_monitor_zbtsram1.log2_granule_size=0  # (int   , init-time) default = '0x0'    : log2 of address granule size
fvp_mps2.mps2_exclusive_monitor_zbtsram1.match_secure_state=1  # (bool  , init-time) default = '1'      : Treat the secure state like an address bit
fvp_mps2.mps2_exclusive_monitor_zbtsram1.monitor_access_level=0  # (int   , init-time) default = '0x0'    : 0: Monitor all accesses, 1: Monitor all accesses except WriteBack, 2: Only monitor accesses with memory type NonCacheable or Device
fvp_mps2.mps2_exclusive_monitor_zbtsram1.monitor_non_excl_stores=0  # (bool  , init-time) default = '0'      : Monitor non-exclusive stores from the same master
fvp_mps2.mps2_exclusive_monitor_zbtsram1.number_of_monitors=8  # (int   , init-time) default = '0x8'    : Number of monitors
fvp_mps2.mps2_exclusive_monitor_zbtsram1.shareability_domain=3  # (int   , init-time) default = '0x3'    : Maximum shareability domain of interest, transactions outside of the domain will pass through un-monitored (0-non-shared, 1-inner, 2-outer, 3-system)
fvp_mps2.mps2_exclusive_monitor_zbtsram2.apply_access_width_criteria_to_non_excl_stores=1  # (bool  , init-time) default = '1'      : Apply the given exclusive store width matching criteria to non-exclusive stores
fvp_mps2.mps2_exclusive_monitor_zbtsram2.clear_on_strex_address_mismatch=1  # (bool  , init-time) default = '1'      : Whether monitor is cleared when strex fails due to address mismatch
fvp_mps2.mps2_exclusive_monitor_zbtsram2.enable_component=1  # (bool  , init-time) default = '1'      : Enable component
fvp_mps2.mps2_exclusive_monitor_zbtsram2.exclusive_monitor_clear_on_atomic_from_same_master=1  # (bool  , init-time) default = '1'      : Monitor atomics from the same master
fvp_mps2.mps2_exclusive_monitor_zbtsram2.log2_granule_size=0  # (int   , init-time) default = '0x0'    : log2 of address granule size
fvp_mps2.mps2_exclusive_monitor_zbtsram2.match_secure_state=1  # (bool  , init-time) default = '1'      : Treat the secure state like an address bit
fvp_mps2.mps2_exclusive_monitor_zbtsram2.monitor_access_level=0  # (int   , init-time) default = '0x0'    : 0: Monitor all accesses, 1: Monitor all accesses except WriteBack, 2: Only monitor accesses with memory type NonCacheable or Device
fvp_mps2.mps2_exclusive_monitor_zbtsram2.monitor_non_excl_stores=0  # (bool  , init-time) default = '0'      : Monitor non-exclusive stores from the same master
fvp_mps2.mps2_exclusive_monitor_zbtsram2.number_of_monitors=8  # (int   , init-time) default = '0x8'    : Number of monitors
fvp_mps2.mps2_exclusive_monitor_zbtsram2.shareability_domain=3  # (int   , init-time) default = '0x3'    : Maximum shareability domain of interest, transactions outside of the domain will pass through un-monitored (0-non-shared, 1-inner, 2-outer, 3-system)
fvp_mps2.mps2_secure_control_register_block.AHBPPCEXP_DIS0=0  # (int   , init-time) default = '0x0'    : Disables support for individual bits on the AHBNSPPCEXP0 and AHBPPPCEXP0 buses
fvp_mps2.mps2_secure_control_register_block.AHBPPCEXP_DIS1=0  # (int   , init-time) default = '0x0'    : Disables support for individual bits on the AHBNSPPCEXP1 and AHBPPPCEXP1 buses
fvp_mps2.mps2_secure_control_register_block.AHBPPCEXP_DIS2=0  # (int   , init-time) default = '0x0'    : Disables support for individual bits on the AHBNSPPCEXP2 and AHBPPPCEXP2 buses
fvp_mps2.mps2_secure_control_register_block.AHBPPCEXP_DIS3=0  # (int   , init-time) default = '0x0'    : Disables support for individual bits on the AHBNSPPCEXP3 and AHBPPPCEXP3 buses
fvp_mps2.mps2_secure_control_register_block.APBPPCEXP_DIS0=0  # (int   , init-time) default = '0x0'    : Disables support for individual bits on the APBNSPPCEXP0 and APBPPPCEXP0 buses
fvp_mps2.mps2_secure_control_register_block.APBPPCEXP_DIS1=0  # (int   , init-time) default = '0x0'    : Disables support for individual bits on the APBNSPPCEXP1 and APBPPPCEXP1 buses
fvp_mps2.mps2_secure_control_register_block.APBPPCEXP_DIS2=0  # (int   , init-time) default = '0x0'    : Disables support for individual bits on the APBNSPPCEXP2 and APBPPPCEXP2 buses
fvp_mps2.mps2_secure_control_register_block.APBPPCEXP_DIS3=0  # (int   , init-time) default = '0x0'    : Disables support for individual bits on the APBNSPPCEXP3 and APBPPPCEXP3 buses
fvp_mps2.mps2_secure_control_register_block.FLASH_BLOCK_CFG=3  # (int   , init-time) default = '0x3'    : Flash Block size configuration
fvp_mps2.mps2_secure_control_register_block.FLASH_WATERMARK_SUPPORTED=1  # (bool  , init-time) default = '1'      : Flash Watermark supported
fvp_mps2.mps2_secure_control_register_block.SRAM_BLOCK_CFG=3  # (int   , init-time) default = '0x3'    : SRAM Block size configuration
fvp_mps2.mps2_secure_control_register_block.SRAM_WATERMARK_SUPPORTED=1  # (bool  , init-time) default = '1'      : SRAM Watermark supported
fvp_mps2.mps2_timer0.clk_div.div=1                    # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.mps2_timer0.clk_div.mul=1                    # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.mps2_timer1.clk_div.div=1                    # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.mps2_timer1.clk_div.mul=1                    # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.mps2_visualisation.disable-visualisation=0   # (bool  , init-time) default = '0'      : Enable/disable visualisation
fvp_mps2.mps2_visualisation.idler.delay_ms=50         # (int   , init-time) default = '0x32'   : Determines the period, in milliseconds of real time, between gui_callback() calls.
fvp_mps2.mps2_visualisation.rate_limit-enable=1       # (bool  , init-time) default = '1'      : Rate limit simulation.
fvp_mps2.mps2_visualisation.window_title=CLCD %cpu%   # (string, init-time) default = 'CLCD %cpu%' : Window title (%cpu% is replaced by cpu_name)
fvp_mps2.pl022_ssp_mps2.prescaler.div=1               # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.pl022_ssp_mps2.prescaler.mul=1               # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.platform_type=0                              # (int   , init-time) default = '0x0'    : 0:Original MPS2 ; 1:IoT Kit (cut-down SSE-200) ; 2:Full SSE-200; 3:SVOS; 4:msniper
fvp_mps2.smsc_91c111.cache_size=65536                 # (int   , init-time) default = '0x10000' : Size of cache memory in SMSC MMU
fvp_mps2.smsc_91c111.enabled=0                        # (bool  , init-time) default = '0'      : Host interface connection enabled
fvp_mps2.smsc_91c111.mac_address=00:02:f7:ef:8c:f7    # (string, init-time) default = '00:02:f7:ef:8c:f7' : Host/model MAC address
fvp_mps2.smsc_91c111.not_lan911x=0                    # (bool  , init-time) default = '0'      : Gracefully fail SMSC LAN911x driver probe
fvp_mps2.smsc_91c111.promiscuous=1                    # (bool  , init-time) default = '1'      : Put host into promiscuous mode
fvp_mps2.sse200.apb_ppc_iotss_subsystem0.NONSEC_MASK=0  # (int   , init-time) default = '0x0'    : 16-bit wide mask for security checking of ports: 0 = check, 1 = mask
fvp_mps2.sse200.apb_ppc_iotss_subsystem0.PORTx_ENABLE=65535  # (int   , init-time) default = '0xffff' : Enable (1) or disable (0) port x (where x is between 0-15): enable = 1, disable = 0
fvp_mps2.sse200.apb_ppc_iotss_subsystem0.diagnostics=0  # (int   , run-time ) default = '0x0'    : Diagnostics
fvp_mps2.sse200.apb_ppc_iotss_subsystem1.NONSEC_MASK=0  # (int   , init-time) default = '0x0'    : 16-bit wide mask for security checking of ports: 0 = check, 1 = mask
fvp_mps2.sse200.apb_ppc_iotss_subsystem1.PORTx_ENABLE=65535  # (int   , init-time) default = '0xffff' : Enable (1) or disable (0) port x (where x is between 0-15): enable = 1, disable = 0
fvp_mps2.sse200.apb_ppc_iotss_subsystem1.diagnostics=0  # (int   , run-time ) default = '0x0'    : Diagnostics
fvp_mps2.sse200.bus_error_warning_memory.diagnostics=2  # (int   , init-time) default = '0x2'    : Diagnostics 0-4 (0:FATAL 1:ERROR 2:WARNING 3:INFO 4:DEBUG - DEFAULT==2)
fvp_mps2.sse200.bus_error_warning_memory.read_data=0  # (int   , init-time) default = '0x0'    : Data to return on reads, if not aborting
fvp_mps2.sse200.clock32kHz.div=1                      # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.sse200.clockdivider.div=1                    # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.sse200.cmsdk_dualtimer.clk_div0.div=1        # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.sse200.cmsdk_dualtimer.clk_div0.mul=1        # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.sse200.cmsdk_dualtimer.clk_div1.div=1        # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.sse200.cmsdk_dualtimer.clk_div1.mul=1        # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.sse200.cordio_ppu.revision=r0p0              # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.cordio_ppu.use_active_signal=0        # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.cpu0core_ppu.revision=r0p0            # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.cpu0dbg_ppu.revision=r0p0             # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.cpu1core_ppu.revision=r0p0            # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.cpu1core_ppu.use_active_signal=0      # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.cpu1dbg_ppu.revision=r0p0             # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.cpu1dbg_ppu.use_active_signal=0       # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.crypto_ppu.revision=r0p0              # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.crypto_ppu.use_active_signal=0        # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.dbg_ppu.revision=r0p0                 # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.dbg_ppu.use_active_signal=0           # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram0.apply_access_width_criteria_to_non_excl_stores=1  # (bool  , init-time) default = '1'      : Apply the given exclusive store width matching criteria to non-exclusive stores
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram0.clear_on_strex_address_mismatch=1  # (bool  , init-time) default = '1'      : Whether monitor is cleared when strex fails due to address mismatch
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram0.enable_component=1  # (bool  , init-time) default = '1'      : Enable component
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram0.exclusive_monitor_clear_on_atomic_from_same_master=1  # (bool  , init-time) default = '1'      : Monitor atomics from the same master
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram0.log2_granule_size=0  # (int   , init-time) default = '0x0'    : log2 of address granule size
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram0.match_secure_state=1  # (bool  , init-time) default = '1'      : Treat the secure state like an address bit
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram0.monitor_access_level=0  # (int   , init-time) default = '0x0'    : 0: Monitor all accesses, 1: Monitor all accesses except WriteBack, 2: Only monitor accesses with memory type NonCacheable or Device
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram0.monitor_non_excl_stores=0  # (bool  , init-time) default = '0'      : Monitor non-exclusive stores from the same master
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram0.number_of_monitors=8  # (int   , init-time) default = '0x8'    : Number of monitors
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram0.shareability_domain=3  # (int   , init-time) default = '0x3'    : Maximum shareability domain of interest, transactions outside of the domain will pass through un-monitored (0-non-shared, 1-inner, 2-outer, 3-system)
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram1.apply_access_width_criteria_to_non_excl_stores=1  # (bool  , init-time) default = '1'      : Apply the given exclusive store width matching criteria to non-exclusive stores
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram1.clear_on_strex_address_mismatch=1  # (bool  , init-time) default = '1'      : Whether monitor is cleared when strex fails due to address mismatch
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram1.enable_component=1  # (bool  , init-time) default = '1'      : Enable component
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram1.exclusive_monitor_clear_on_atomic_from_same_master=1  # (bool  , init-time) default = '1'      : Monitor atomics from the same master
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram1.log2_granule_size=0  # (int   , init-time) default = '0x0'    : log2 of address granule size
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram1.match_secure_state=1  # (bool  , init-time) default = '1'      : Treat the secure state like an address bit
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram1.monitor_access_level=0  # (int   , init-time) default = '0x0'    : 0: Monitor all accesses, 1: Monitor all accesses except WriteBack, 2: Only monitor accesses with memory type NonCacheable or Device
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram1.monitor_non_excl_stores=0  # (bool  , init-time) default = '0'      : Monitor non-exclusive stores from the same master
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram1.number_of_monitors=8  # (int   , init-time) default = '0x8'    : Number of monitors
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram1.shareability_domain=3  # (int   , init-time) default = '0x3'    : Maximum shareability domain of interest, transactions outside of the domain will pass through un-monitored (0-non-shared, 1-inner, 2-outer, 3-system)
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram2.apply_access_width_criteria_to_non_excl_stores=1  # (bool  , init-time) default = '1'      : Apply the given exclusive store width matching criteria to non-exclusive stores
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram2.clear_on_strex_address_mismatch=1  # (bool  , init-time) default = '1'      : Whether monitor is cleared when strex fails due to address mismatch
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram2.enable_component=1  # (bool  , init-time) default = '1'      : Enable component
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram2.exclusive_monitor_clear_on_atomic_from_same_master=1  # (bool  , init-time) default = '1'      : Monitor atomics from the same master
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram2.log2_granule_size=0  # (int   , init-time) default = '0x0'    : log2 of address granule size
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram2.match_secure_state=1  # (bool  , init-time) default = '1'      : Treat the secure state like an address bit
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram2.monitor_access_level=0  # (int   , init-time) default = '0x0'    : 0: Monitor all accesses, 1: Monitor all accesses except WriteBack, 2: Only monitor accesses with memory type NonCacheable or Device
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram2.monitor_non_excl_stores=0  # (bool  , init-time) default = '0'      : Monitor non-exclusive stores from the same master
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram2.number_of_monitors=8  # (int   , init-time) default = '0x8'    : Number of monitors
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram2.shareability_domain=3  # (int   , init-time) default = '0x3'    : Maximum shareability domain of interest, transactions outside of the domain will pass through un-monitored (0-non-shared, 1-inner, 2-outer, 3-system)
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram3.apply_access_width_criteria_to_non_excl_stores=1  # (bool  , init-time) default = '1'      : Apply the given exclusive store width matching criteria to non-exclusive stores
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram3.clear_on_strex_address_mismatch=1  # (bool  , init-time) default = '1'      : Whether monitor is cleared when strex fails due to address mismatch
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram3.enable_component=1  # (bool  , init-time) default = '1'      : Enable component
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram3.exclusive_monitor_clear_on_atomic_from_same_master=1  # (bool  , init-time) default = '1'      : Monitor atomics from the same master
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram3.log2_granule_size=0  # (int   , init-time) default = '0x0'    : log2 of address granule size
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram3.match_secure_state=1  # (bool  , init-time) default = '1'      : Treat the secure state like an address bit
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram3.monitor_access_level=0  # (int   , init-time) default = '0x0'    : 0: Monitor all accesses, 1: Monitor all accesses except WriteBack, 2: Only monitor accesses with memory type NonCacheable or Device
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram3.monitor_non_excl_stores=0  # (bool  , init-time) default = '0'      : Monitor non-exclusive stores from the same master
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram3.number_of_monitors=8  # (int   , init-time) default = '0x8'    : Number of monitors
fvp_mps2.sse200.exclusive_monitor_iotss_internal_sram3.shareability_domain=3  # (int   , init-time) default = '0x3'    : Maximum shareability domain of interest, transactions outside of the domain will pass through un-monitored (0-non-shared, 1-inner, 2-outer, 3-system)
fvp_mps2.sse200.has_crypto=0                          # (bool  , init-time) default = '0'      : CryptoCell Included. 0:No, 1: Yes
fvp_mps2.sse200.idau_labeller.diagnostics=0           # (int   , init-time) default = '0x0'    : Diagnostics
fvp_mps2.sse200.internal_msniper_tcm.enable_atomic_ops=0  # (bool  , init-time) default = '0'      : Supports Atomic Operations
fvp_mps2.sse200.internal_msniper_tcm.fill1=3755990991  # (int   , init-time) default = '0xdfdfdfcf' : Fill pattern 1, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.sse200.internal_msniper_tcm.fill2=3487555551  # (int   , init-time) default = '0xcfdfdfdf' : Fill pattern 2, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.sse200.internal_msniper_tcm.size=4294967296  # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.sse200.iotss_cpuidentity.debugger_master_id=4294967295  # (int   , init-time) default = '0xffffffff' : 
fvp_mps2.sse200.iotss_internal_sram0.enable_atomic_ops=0  # (bool  , init-time) default = '0'      : Supports Atomic Operations
fvp_mps2.sse200.iotss_internal_sram0.fill1=3755990991  # (int   , init-time) default = '0xdfdfdfcf' : Fill pattern 1, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.sse200.iotss_internal_sram0.fill2=3487555551  # (int   , init-time) default = '0xcfdfdfdf' : Fill pattern 2, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.sse200.iotss_internal_sram0.size=4294967296  # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.sse200.iotss_internal_sram1.enable_atomic_ops=0  # (bool  , init-time) default = '0'      : Supports Atomic Operations
fvp_mps2.sse200.iotss_internal_sram1.fill1=3755990991  # (int   , init-time) default = '0xdfdfdfcf' : Fill pattern 1, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.sse200.iotss_internal_sram1.fill2=3487555551  # (int   , init-time) default = '0xcfdfdfdf' : Fill pattern 2, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.sse200.iotss_internal_sram1.size=4294967296  # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.sse200.iotss_internal_sram2.enable_atomic_ops=0  # (bool  , init-time) default = '0'      : Supports Atomic Operations
fvp_mps2.sse200.iotss_internal_sram2.fill1=3755990991  # (int   , init-time) default = '0xdfdfdfcf' : Fill pattern 1, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.sse200.iotss_internal_sram2.fill2=3487555551  # (int   , init-time) default = '0xcfdfdfdf' : Fill pattern 2, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.sse200.iotss_internal_sram2.size=4294967296  # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.sse200.iotss_internal_sram3.enable_atomic_ops=0  # (bool  , init-time) default = '0'      : Supports Atomic Operations
fvp_mps2.sse200.iotss_internal_sram3.fill1=3755990991  # (int   , init-time) default = '0xdfdfdfcf' : Fill pattern 1, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.sse200.iotss_internal_sram3.fill2=3487555551  # (int   , init-time) default = '0xcfdfdfdf' : Fill pattern 2, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.sse200.iotss_internal_sram3.size=4294967296  # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.sse200.nonsecure_watchdog.simhalt=0          # (bool  , run-time ) default = '0'      : Halt on reset.
fvp_mps2.sse200.ram0_ppu.revision=r0p0                # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.ram0_ppu.use_active_signal=0          # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.ram1_ppu.revision=r0p0                # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.ram1_ppu.use_active_signal=0          # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.ram2_ppu.revision=r0p0                # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.ram2_ppu.use_active_signal=0          # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.ram3_ppu.revision=r0p0                # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.ram3_ppu.use_active_signal=0          # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.s32k_timer.clk_div.div=1              # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.sse200.s32k_timer.clk_div.mul=1              # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.sse200.s32k_watchdog.simhalt=0               # (bool  , run-time ) default = '0'      : Halt on reset.
fvp_mps2.sse200.secure_control_register_block.FLASH_BLOCK_CFG=3  # (int   , init-time) default = '0x3'    : Flash Block size configuration
fvp_mps2.sse200.secure_control_register_block.FLASH_WATERMARK_SUPPORTED=1  # (bool  , init-time) default = '1'      : Flash Watermark supported
fvp_mps2.sse200.secure_control_register_block.SRAM_BLOCK_CFG=3  # (int   , init-time) default = '0x3'    : SRAM Block size configuration
fvp_mps2.sse200.secure_control_register_block.SRAM_WATERMARK_SUPPORTED=1  # (bool  , init-time) default = '1'      : SRAM Watermark supported
fvp_mps2.sse200.secure_watchdog.simhalt=0             # (bool  , run-time ) default = '0'      : Halt on reset.
fvp_mps2.sse200.sys_ppu.revision=r0p0                 # (string, init-time) default = 'r0p0'   : Revision
fvp_mps2.sse200.sys_ppu.use_active_signal=0           # (bool  , init-time) default = '0'      : Use device-active signal
fvp_mps2.sse200.timer0.clk_div.div=1                  # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.sse200.timer0.clk_div.mul=1                  # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.sse200.timer1.clk_div.div=1                  # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.sse200.timer1.clk_div.mul=1                  # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.ssram1.enable_atomic_ops=0                   # (bool  , init-time) default = '0'      : Supports Atomic Operations
fvp_mps2.ssram1.fill1=3755990991                      # (int   , init-time) default = '0xdfdfdfcf' : Fill pattern 1, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.ssram1.fill2=3487555551                      # (int   , init-time) default = '0xcfdfdfdf' : Fill pattern 2, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.ssram1.size=4294967296                       # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.ssram2.enable_atomic_ops=0                   # (bool  , init-time) default = '0'      : Supports Atomic Operations
fvp_mps2.ssram2.fill1=3755990991                      # (int   , init-time) default = '0xdfdfdfcf' : Fill pattern 1, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.ssram2.fill2=3487555551                      # (int   , init-time) default = '0xcfdfdfdf' : Fill pattern 2, initialise memory at start of simulation with alternating fill1, fill2 pattern
fvp_mps2.ssram2.size=4294967296                       # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.stub0.enable_atomic_ops=0                    # (bool  , init-time) default = '0'      : Supports Atomic Operations
fvp_mps2.stub0.size=4294967296                        # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.stub1.enable_atomic_ops=0                    # (bool  , init-time) default = '0'      : Supports Atomic Operations
fvp_mps2.stub1.size=4294967296                        # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.stub_i2c1.enable_atomic_ops=0                # (bool  , init-time) default = '0'      : Supports Atomic Operations
fvp_mps2.stub_i2c1.size=4294967296                    # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.stub_i2s.enable_atomic_ops=0                 # (bool  , init-time) default = '0'      : Supports Atomic Operations
fvp_mps2.stub_i2s.size=4294967296                     # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.stub_spi0.enable_atomic_ops=0                # (bool  , init-time) default = '0'      : Supports Atomic Operations
fvp_mps2.stub_spi0.size=4294967296                    # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.stub_spi2.enable_atomic_ops=0                # (bool  , init-time) default = '0'      : Supports Atomic Operations
fvp_mps2.stub_spi2.size=4294967296                    # (int   , init-time) default = '0x100000000' : Memory Size
fvp_mps2.svos_dualtimer.svos_dualtimer0.clk_div0.div=1  # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.svos_dualtimer.svos_dualtimer0.clk_div0.mul=1  # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.svos_dualtimer.svos_dualtimer0.clk_div1.div=1  # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.svos_dualtimer.svos_dualtimer0.clk_div1.mul=1  # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.svos_dualtimer.svos_dualtimer1.clk_div0.div=1  # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.svos_dualtimer.svos_dualtimer1.clk_div0.mul=1  # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.svos_dualtimer.svos_dualtimer1.clk_div1.div=1  # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.svos_dualtimer.svos_dualtimer1.clk_div1.mul=1  # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.svos_dualtimer.svos_dualtimer2.clk_div0.div=1  # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.svos_dualtimer.svos_dualtimer2.clk_div0.mul=1  # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.svos_dualtimer.svos_dualtimer2.clk_div1.div=1  # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.svos_dualtimer.svos_dualtimer2.clk_div1.mul=1  # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.svos_dualtimer.svos_dualtimer3.clk_div0.div=1  # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.svos_dualtimer.svos_dualtimer3.clk_div0.mul=1  # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.svos_dualtimer.svos_dualtimer3.clk_div1.div=1  # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.svos_dualtimer.svos_dualtimer3.clk_div1.mul=1  # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.telnetterminal0.mode=telnet                  # (string, init-time) default = 'telnet' : Terminal initialisation mode
fvp_mps2.telnetterminal0.quiet=0                      # (bool  , init-time) default = '0'      : Avoid output on stdout/stderr
fvp_mps2.telnetterminal0.start_port=5000              # (int   , init-time) default = '0x1388' : Telnet TCP Port Number
fvp_mps2.telnetterminal0.start_telnet=1               # (bool  , init-time) default = '1'      : Start telnet if nothing connected
fvp_mps2.telnetterminal0.terminal_command=            # (string, init-time) default = ''       : Commandline to launch a terminal application and connect to the opened TCP port. Keywords %port and %title will be replaced with the opened port number and component name respectively. An empty string (default behaviour) will launch xterm (Linux) or telnet.exe (Windows)
fvp_mps2.telnetterminal1.mode=telnet                  # (string, init-time) default = 'telnet' : Terminal initialisation mode
fvp_mps2.telnetterminal1.quiet=0                      # (bool  , init-time) default = '0'      : Avoid output on stdout/stderr
fvp_mps2.telnetterminal1.start_port=5000              # (int   , init-time) default = '0x1388' : Telnet TCP Port Number
fvp_mps2.telnetterminal1.start_telnet=1               # (bool  , init-time) default = '1'      : Start telnet if nothing connected
fvp_mps2.telnetterminal1.terminal_command=            # (string, init-time) default = ''       : Commandline to launch a terminal application and connect to the opened TCP port. Keywords %port and %title will be replaced with the opened port number and component name respectively. An empty string (default behaviour) will launch xterm (Linux) or telnet.exe (Windows)
fvp_mps2.telnetterminal2.mode=telnet                  # (string, init-time) default = 'telnet' : Terminal initialisation mode
fvp_mps2.telnetterminal2.quiet=0                      # (bool  , init-time) default = '0'      : Avoid output on stdout/stderr
fvp_mps2.telnetterminal2.start_port=5000              # (int   , init-time) default = '0x1388' : Telnet TCP Port Number
fvp_mps2.telnetterminal2.start_telnet=1               # (bool  , init-time) default = '1'      : Start telnet if nothing connected
fvp_mps2.telnetterminal2.terminal_command=            # (string, init-time) default = ''       : Commandline to launch a terminal application and connect to the opened TCP port. Keywords %port and %title will be replaced with the opened port number and component name respectively. An empty string (default behaviour) will launch xterm (Linux) or telnet.exe (Windows)
fvp_mps2.v_path=                                      # (string, init-time) default = ''       : Specify path to python folder with scripts for both of VSI and VIO
fvp_mps2.vht_vio.vio_basename=arm_vio                 # (string, init-time) default = 'arm_vio' : Basename of scripts to use for VIO
fvp_mps2.vht_vsi0.vsi_basename=arm_vsi                # (string, init-time) default = 'arm_vsi' : Basename of scripts to use for VSI
fvp_mps2.vht_vsi1.vsi_basename=arm_vsi                # (string, init-time) default = 'arm_vsi' : Basename of scripts to use for VSI
fvp_mps2.vht_vsi2.vsi_basename=arm_vsi                # (string, init-time) default = 'arm_vsi' : Basename of scripts to use for VSI
fvp_mps2.vht_vsi3.vsi_basename=arm_vsi                # (string, init-time) default = 'arm_vsi' : Basename of scripts to use for VSI
fvp_mps2.vht_vsi4.vsi_basename=arm_vsi                # (string, init-time) default = 'arm_vsi' : Basename of scripts to use for VSI
fvp_mps2.vht_vsi5.vsi_basename=arm_vsi                # (string, init-time) default = 'arm_vsi' : Basename of scripts to use for VSI
fvp_mps2.vht_vsi6.vsi_basename=arm_vsi                # (string, init-time) default = 'arm_vsi' : Basename of scripts to use for VSI
fvp_mps2.vht_vsi7.vsi_basename=arm_vsi                # (string, init-time) default = 'arm_vsi' : Basename of scripts to use for VSI
fvp_mps2.vht_vsocket.name=                            # (string, init-time) default = ''       : Name of the component
idau.IDAU_REGION0.EXEMPT=0                            # (bool  , init-time) default = '0'      : Mark IDAU region0 as exempt
idau.IDAU_REGION1.EXEMPT=0                            # (bool  , init-time) default = '0'      : Mark IDAU region1 as exempt
idau.IDAU_REGION10.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region10 as exempt
idau.IDAU_REGION100.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region100
idau.IDAU_REGION100.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 100 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION100.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region100 as exempt
idau.IDAU_REGION100.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region100
idau.IDAU_REGION100.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 100 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION101.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region101
idau.IDAU_REGION101.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 101 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION101.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region101 as exempt
idau.IDAU_REGION101.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region101
idau.IDAU_REGION101.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 101 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION102.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region102
idau.IDAU_REGION102.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 102 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION102.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region102 as exempt
idau.IDAU_REGION102.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region102
idau.IDAU_REGION102.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 102 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION103.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region103
idau.IDAU_REGION103.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 103 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION103.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region103 as exempt
idau.IDAU_REGION103.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region103
idau.IDAU_REGION103.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 103 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION104.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region104
idau.IDAU_REGION104.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 104 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION104.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region104 as exempt
idau.IDAU_REGION104.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region104
idau.IDAU_REGION104.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 104 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION105.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region105
idau.IDAU_REGION105.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 105 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION105.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region105 as exempt
idau.IDAU_REGION105.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region105
idau.IDAU_REGION105.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 105 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION106.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region106
idau.IDAU_REGION106.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 106 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION106.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region106 as exempt
idau.IDAU_REGION106.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region106
idau.IDAU_REGION106.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 106 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION107.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region107
idau.IDAU_REGION107.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 107 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION107.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region107 as exempt
idau.IDAU_REGION107.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region107
idau.IDAU_REGION107.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 107 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION108.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region108
idau.IDAU_REGION108.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 108 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION108.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region108 as exempt
idau.IDAU_REGION108.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region108
idau.IDAU_REGION108.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 108 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION109.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region109
idau.IDAU_REGION109.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 109 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION109.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region109 as exempt
idau.IDAU_REGION109.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region109
idau.IDAU_REGION109.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 109 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION11.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region11 as exempt
idau.IDAU_REGION110.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region110
idau.IDAU_REGION110.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 110 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION110.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region110 as exempt
idau.IDAU_REGION110.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region110
idau.IDAU_REGION110.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 110 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION111.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region111
idau.IDAU_REGION111.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 111 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION111.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region111 as exempt
idau.IDAU_REGION111.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region111
idau.IDAU_REGION111.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 111 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION112.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region112
idau.IDAU_REGION112.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 112 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION112.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region112 as exempt
idau.IDAU_REGION112.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region112
idau.IDAU_REGION112.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 112 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION113.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region113
idau.IDAU_REGION113.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 113 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION113.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region113 as exempt
idau.IDAU_REGION113.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region113
idau.IDAU_REGION113.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 113 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION114.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region114
idau.IDAU_REGION114.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 114 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION114.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region114 as exempt
idau.IDAU_REGION114.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region114
idau.IDAU_REGION114.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 114 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION115.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region115
idau.IDAU_REGION115.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 115 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION115.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region115 as exempt
idau.IDAU_REGION115.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region115
idau.IDAU_REGION115.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 115 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION116.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region116
idau.IDAU_REGION116.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 116 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION116.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region116 as exempt
idau.IDAU_REGION116.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region116
idau.IDAU_REGION116.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 116 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION117.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region117
idau.IDAU_REGION117.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 117 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION117.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region117 as exempt
idau.IDAU_REGION117.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region117
idau.IDAU_REGION117.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 117 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION118.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region118
idau.IDAU_REGION118.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 118 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION118.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region118 as exempt
idau.IDAU_REGION118.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region118
idau.IDAU_REGION118.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 118 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION119.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region119
idau.IDAU_REGION119.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 119 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION119.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region119 as exempt
idau.IDAU_REGION119.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region119
idau.IDAU_REGION119.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 119 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION12.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region12 as exempt
idau.IDAU_REGION120.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region120
idau.IDAU_REGION120.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 120 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION120.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region120 as exempt
idau.IDAU_REGION120.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region120
idau.IDAU_REGION120.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 120 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION121.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region121
idau.IDAU_REGION121.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 121 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION121.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region121 as exempt
idau.IDAU_REGION121.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region121
idau.IDAU_REGION121.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 121 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION122.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region122
idau.IDAU_REGION122.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 122 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION122.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region122 as exempt
idau.IDAU_REGION122.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region122
idau.IDAU_REGION122.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 122 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION123.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region123
idau.IDAU_REGION123.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 123 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION123.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region123 as exempt
idau.IDAU_REGION123.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region123
idau.IDAU_REGION123.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 123 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION124.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region124
idau.IDAU_REGION124.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 124 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION124.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region124 as exempt
idau.IDAU_REGION124.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region124
idau.IDAU_REGION124.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 124 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION125.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region125
idau.IDAU_REGION125.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 125 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION125.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region125 as exempt
idau.IDAU_REGION125.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region125
idau.IDAU_REGION125.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 125 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION126.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region126
idau.IDAU_REGION126.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 126 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION126.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region126 as exempt
idau.IDAU_REGION126.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region126
idau.IDAU_REGION126.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 126 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION127.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region127
idau.IDAU_REGION127.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 127 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION127.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region127 as exempt
idau.IDAU_REGION127.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region127
idau.IDAU_REGION127.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 127 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION128.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region128
idau.IDAU_REGION128.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 128 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION128.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region128 as exempt
idau.IDAU_REGION128.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region128
idau.IDAU_REGION128.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 128 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION129.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region129
idau.IDAU_REGION129.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 129 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION129.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region129 as exempt
idau.IDAU_REGION129.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region129
idau.IDAU_REGION129.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 129 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION13.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region13 as exempt
idau.IDAU_REGION130.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region130
idau.IDAU_REGION130.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 130 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION130.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region130 as exempt
idau.IDAU_REGION130.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region130
idau.IDAU_REGION130.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 130 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION131.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region131
idau.IDAU_REGION131.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 131 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION131.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region131 as exempt
idau.IDAU_REGION131.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region131
idau.IDAU_REGION131.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 131 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION132.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region132
idau.IDAU_REGION132.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 132 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION132.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region132 as exempt
idau.IDAU_REGION132.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region132
idau.IDAU_REGION132.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 132 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION133.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region133
idau.IDAU_REGION133.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 133 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION133.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region133 as exempt
idau.IDAU_REGION133.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region133
idau.IDAU_REGION133.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 133 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION134.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region134
idau.IDAU_REGION134.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 134 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION134.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region134 as exempt
idau.IDAU_REGION134.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region134
idau.IDAU_REGION134.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 134 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION135.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region135
idau.IDAU_REGION135.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 135 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION135.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region135 as exempt
idau.IDAU_REGION135.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region135
idau.IDAU_REGION135.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 135 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION136.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region136
idau.IDAU_REGION136.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 136 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION136.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region136 as exempt
idau.IDAU_REGION136.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region136
idau.IDAU_REGION136.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 136 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION137.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region137
idau.IDAU_REGION137.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 137 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION137.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region137 as exempt
idau.IDAU_REGION137.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region137
idau.IDAU_REGION137.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 137 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION138.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region138
idau.IDAU_REGION138.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 138 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION138.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region138 as exempt
idau.IDAU_REGION138.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region138
idau.IDAU_REGION138.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 138 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION139.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region139
idau.IDAU_REGION139.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 139 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION139.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region139 as exempt
idau.IDAU_REGION139.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region139
idau.IDAU_REGION139.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 139 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION140.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region140
idau.IDAU_REGION140.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 140 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION140.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region140 as exempt
idau.IDAU_REGION140.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region140
idau.IDAU_REGION140.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 140 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION141.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region141
idau.IDAU_REGION141.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 141 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION141.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region141 as exempt
idau.IDAU_REGION141.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region141
idau.IDAU_REGION141.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 141 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION142.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region142
idau.IDAU_REGION142.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 142 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION142.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region142 as exempt
idau.IDAU_REGION142.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region142
idau.IDAU_REGION142.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 142 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION143.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region143
idau.IDAU_REGION143.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 143 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION143.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region143 as exempt
idau.IDAU_REGION143.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region143
idau.IDAU_REGION143.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 143 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION144.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region144
idau.IDAU_REGION144.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 144 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION144.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region144 as exempt
idau.IDAU_REGION144.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region144
idau.IDAU_REGION144.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 144 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION145.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region145
idau.IDAU_REGION145.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 145 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION145.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region145 as exempt
idau.IDAU_REGION145.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region145
idau.IDAU_REGION145.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 145 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION146.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region146
idau.IDAU_REGION146.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 146 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION146.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region146 as exempt
idau.IDAU_REGION146.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region146
idau.IDAU_REGION146.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 146 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION147.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region147
idau.IDAU_REGION147.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 147 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION147.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region147 as exempt
idau.IDAU_REGION147.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region147
idau.IDAU_REGION147.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 147 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION148.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region148
idau.IDAU_REGION148.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 148 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION148.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region148 as exempt
idau.IDAU_REGION148.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region148
idau.IDAU_REGION148.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 148 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION149.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region149
idau.IDAU_REGION149.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 149 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION149.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region149 as exempt
idau.IDAU_REGION149.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region149
idau.IDAU_REGION149.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 149 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION150.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region150
idau.IDAU_REGION150.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 150 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION150.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region150 as exempt
idau.IDAU_REGION150.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region150
idau.IDAU_REGION150.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 150 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION151.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region151
idau.IDAU_REGION151.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 151 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION151.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region151 as exempt
idau.IDAU_REGION151.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region151
idau.IDAU_REGION151.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 151 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION152.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region152
idau.IDAU_REGION152.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 152 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION152.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region152 as exempt
idau.IDAU_REGION152.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region152
idau.IDAU_REGION152.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 152 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION153.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region153
idau.IDAU_REGION153.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 153 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION153.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region153 as exempt
idau.IDAU_REGION153.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region153
idau.IDAU_REGION153.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 153 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION154.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region154
idau.IDAU_REGION154.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 154 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION154.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region154 as exempt
idau.IDAU_REGION154.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region154
idau.IDAU_REGION154.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 154 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION155.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region155
idau.IDAU_REGION155.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 155 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION155.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region155 as exempt
idau.IDAU_REGION155.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region155
idau.IDAU_REGION155.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 155 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION156.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region156
idau.IDAU_REGION156.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 156 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION156.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region156 as exempt
idau.IDAU_REGION156.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region156
idau.IDAU_REGION156.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 156 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION157.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region157
idau.IDAU_REGION157.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 157 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION157.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region157 as exempt
idau.IDAU_REGION157.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region157
idau.IDAU_REGION157.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 157 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION158.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region158
idau.IDAU_REGION158.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 158 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION158.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region158 as exempt
idau.IDAU_REGION158.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region158
idau.IDAU_REGION158.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 158 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION159.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region159
idau.IDAU_REGION159.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 159 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION159.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region159 as exempt
idau.IDAU_REGION159.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region159
idau.IDAU_REGION159.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 159 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION160.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region160
idau.IDAU_REGION160.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 160 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION160.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region160 as exempt
idau.IDAU_REGION160.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region160
idau.IDAU_REGION160.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 160 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION161.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region161
idau.IDAU_REGION161.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 161 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION161.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region161 as exempt
idau.IDAU_REGION161.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region161
idau.IDAU_REGION161.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 161 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION162.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region162
idau.IDAU_REGION162.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 162 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION162.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region162 as exempt
idau.IDAU_REGION162.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region162
idau.IDAU_REGION162.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 162 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION163.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region163
idau.IDAU_REGION163.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 163 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION163.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region163 as exempt
idau.IDAU_REGION163.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region163
idau.IDAU_REGION163.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 163 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION164.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region164
idau.IDAU_REGION164.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 164 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION164.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region164 as exempt
idau.IDAU_REGION164.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region164
idau.IDAU_REGION164.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 164 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION165.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region165
idau.IDAU_REGION165.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 165 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION165.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region165 as exempt
idau.IDAU_REGION165.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region165
idau.IDAU_REGION165.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 165 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION166.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region166
idau.IDAU_REGION166.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 166 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION166.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region166 as exempt
idau.IDAU_REGION166.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region166
idau.IDAU_REGION166.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 166 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION167.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region167
idau.IDAU_REGION167.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 167 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION167.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region167 as exempt
idau.IDAU_REGION167.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region167
idau.IDAU_REGION167.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 167 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION168.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region168
idau.IDAU_REGION168.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 168 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION168.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region168 as exempt
idau.IDAU_REGION168.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region168
idau.IDAU_REGION168.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 168 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION169.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region169
idau.IDAU_REGION169.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 169 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION169.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region169 as exempt
idau.IDAU_REGION169.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region169
idau.IDAU_REGION169.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 169 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION17.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region17 as exempt
idau.IDAU_REGION170.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region170
idau.IDAU_REGION170.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 170 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION170.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region170 as exempt
idau.IDAU_REGION170.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region170
idau.IDAU_REGION170.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 170 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION171.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region171
idau.IDAU_REGION171.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 171 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION171.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region171 as exempt
idau.IDAU_REGION171.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region171
idau.IDAU_REGION171.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 171 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION172.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region172
idau.IDAU_REGION172.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 172 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION172.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region172 as exempt
idau.IDAU_REGION172.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region172
idau.IDAU_REGION172.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 172 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION173.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region173
idau.IDAU_REGION173.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 173 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION173.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region173 as exempt
idau.IDAU_REGION173.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region173
idau.IDAU_REGION173.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 173 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION174.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region174
idau.IDAU_REGION174.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 174 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION174.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region174 as exempt
idau.IDAU_REGION174.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region174
idau.IDAU_REGION174.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 174 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION175.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region175
idau.IDAU_REGION175.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 175 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION175.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region175 as exempt
idau.IDAU_REGION175.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region175
idau.IDAU_REGION175.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 175 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION176.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region176
idau.IDAU_REGION176.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 176 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION176.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region176 as exempt
idau.IDAU_REGION176.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region176
idau.IDAU_REGION176.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 176 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION177.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region177
idau.IDAU_REGION177.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 177 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION177.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region177 as exempt
idau.IDAU_REGION177.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region177
idau.IDAU_REGION177.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 177 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION178.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region178
idau.IDAU_REGION178.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 178 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION178.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region178 as exempt
idau.IDAU_REGION178.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region178
idau.IDAU_REGION178.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 178 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION179.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region179
idau.IDAU_REGION179.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 179 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION179.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region179 as exempt
idau.IDAU_REGION179.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region179
idau.IDAU_REGION179.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 179 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION18.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region18
idau.IDAU_REGION18.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 18 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION18.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region18 as exempt
idau.IDAU_REGION18.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region18
idau.IDAU_REGION18.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 18 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION180.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region180
idau.IDAU_REGION180.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 180 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION180.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region180 as exempt
idau.IDAU_REGION180.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region180
idau.IDAU_REGION180.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 180 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION181.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region181
idau.IDAU_REGION181.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 181 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION181.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region181 as exempt
idau.IDAU_REGION181.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region181
idau.IDAU_REGION181.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 181 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION182.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region182
idau.IDAU_REGION182.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 182 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION182.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region182 as exempt
idau.IDAU_REGION182.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region182
idau.IDAU_REGION182.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 182 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION183.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region183
idau.IDAU_REGION183.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 183 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION183.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region183 as exempt
idau.IDAU_REGION183.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region183
idau.IDAU_REGION183.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 183 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION184.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region184
idau.IDAU_REGION184.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 184 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION184.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region184 as exempt
idau.IDAU_REGION184.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region184
idau.IDAU_REGION184.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 184 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION185.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region185
idau.IDAU_REGION185.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 185 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION185.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region185 as exempt
idau.IDAU_REGION185.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region185
idau.IDAU_REGION185.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 185 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION186.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region186
idau.IDAU_REGION186.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 186 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION186.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region186 as exempt
idau.IDAU_REGION186.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region186
idau.IDAU_REGION186.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 186 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION187.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region187
idau.IDAU_REGION187.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 187 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION187.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region187 as exempt
idau.IDAU_REGION187.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region187
idau.IDAU_REGION187.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 187 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION188.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region188
idau.IDAU_REGION188.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 188 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION188.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region188 as exempt
idau.IDAU_REGION188.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region188
idau.IDAU_REGION188.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 188 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION189.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region189
idau.IDAU_REGION189.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 189 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION189.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region189 as exempt
idau.IDAU_REGION189.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region189
idau.IDAU_REGION189.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 189 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION19.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region19
idau.IDAU_REGION19.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 19 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION19.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region19 as exempt
idau.IDAU_REGION19.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region19
idau.IDAU_REGION19.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 19 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION190.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region190
idau.IDAU_REGION190.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 190 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION190.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region190 as exempt
idau.IDAU_REGION190.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region190
idau.IDAU_REGION190.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 190 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION191.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region191
idau.IDAU_REGION191.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 191 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION191.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region191 as exempt
idau.IDAU_REGION191.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region191
idau.IDAU_REGION191.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 191 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION192.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region192
idau.IDAU_REGION192.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 192 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION192.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region192 as exempt
idau.IDAU_REGION192.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region192
idau.IDAU_REGION192.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 192 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION193.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region193
idau.IDAU_REGION193.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 193 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION193.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region193 as exempt
idau.IDAU_REGION193.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region193
idau.IDAU_REGION193.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 193 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION194.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region194
idau.IDAU_REGION194.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 194 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION194.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region194 as exempt
idau.IDAU_REGION194.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region194
idau.IDAU_REGION194.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 194 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION195.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region195
idau.IDAU_REGION195.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 195 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION195.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region195 as exempt
idau.IDAU_REGION195.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region195
idau.IDAU_REGION195.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 195 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION196.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region196
idau.IDAU_REGION196.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 196 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION196.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region196 as exempt
idau.IDAU_REGION196.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region196
idau.IDAU_REGION196.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 196 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION197.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region197
idau.IDAU_REGION197.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 197 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION197.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region197 as exempt
idau.IDAU_REGION197.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region197
idau.IDAU_REGION197.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 197 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION198.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region198
idau.IDAU_REGION198.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 198 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION198.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region198 as exempt
idau.IDAU_REGION198.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region198
idau.IDAU_REGION198.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 198 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION199.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region199
idau.IDAU_REGION199.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 199 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION199.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region199 as exempt
idau.IDAU_REGION199.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region199
idau.IDAU_REGION199.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 199 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION2.EXEMPT=0                            # (bool  , init-time) default = '0'      : Mark IDAU region2 as exempt
idau.IDAU_REGION20.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region20
idau.IDAU_REGION20.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 20 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION20.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region20 as exempt
idau.IDAU_REGION20.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region20
idau.IDAU_REGION20.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 20 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION200.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region200
idau.IDAU_REGION200.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 200 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION200.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region200 as exempt
idau.IDAU_REGION200.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region200
idau.IDAU_REGION200.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 200 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION201.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region201
idau.IDAU_REGION201.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 201 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION201.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region201 as exempt
idau.IDAU_REGION201.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region201
idau.IDAU_REGION201.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 201 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION202.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region202
idau.IDAU_REGION202.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 202 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION202.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region202 as exempt
idau.IDAU_REGION202.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region202
idau.IDAU_REGION202.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 202 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION203.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region203
idau.IDAU_REGION203.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 203 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION203.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region203 as exempt
idau.IDAU_REGION203.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region203
idau.IDAU_REGION203.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 203 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION204.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region204
idau.IDAU_REGION204.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 204 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION204.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region204 as exempt
idau.IDAU_REGION204.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region204
idau.IDAU_REGION204.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 204 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION205.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region205
idau.IDAU_REGION205.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 205 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION205.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region205 as exempt
idau.IDAU_REGION205.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region205
idau.IDAU_REGION205.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 205 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION206.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region206
idau.IDAU_REGION206.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 206 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION206.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region206 as exempt
idau.IDAU_REGION206.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region206
idau.IDAU_REGION206.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 206 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION207.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region207
idau.IDAU_REGION207.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 207 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION207.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region207 as exempt
idau.IDAU_REGION207.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region207
idau.IDAU_REGION207.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 207 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION208.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region208
idau.IDAU_REGION208.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 208 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION208.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region208 as exempt
idau.IDAU_REGION208.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region208
idau.IDAU_REGION208.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 208 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION209.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region209
idau.IDAU_REGION209.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 209 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION209.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region209 as exempt
idau.IDAU_REGION209.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region209
idau.IDAU_REGION209.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 209 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION21.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region21
idau.IDAU_REGION21.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 21 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION21.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region21 as exempt
idau.IDAU_REGION21.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region21
idau.IDAU_REGION21.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 21 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION210.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region210
idau.IDAU_REGION210.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 210 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION210.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region210 as exempt
idau.IDAU_REGION210.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region210
idau.IDAU_REGION210.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 210 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION211.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region211
idau.IDAU_REGION211.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 211 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION211.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region211 as exempt
idau.IDAU_REGION211.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region211
idau.IDAU_REGION211.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 211 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION212.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region212
idau.IDAU_REGION212.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 212 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION212.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region212 as exempt
idau.IDAU_REGION212.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region212
idau.IDAU_REGION212.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 212 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION213.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region213
idau.IDAU_REGION213.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 213 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION213.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region213 as exempt
idau.IDAU_REGION213.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region213
idau.IDAU_REGION213.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 213 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION214.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region214
idau.IDAU_REGION214.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 214 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION214.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region214 as exempt
idau.IDAU_REGION214.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region214
idau.IDAU_REGION214.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 214 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION215.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region215
idau.IDAU_REGION215.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 215 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION215.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region215 as exempt
idau.IDAU_REGION215.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region215
idau.IDAU_REGION215.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 215 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION216.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region216
idau.IDAU_REGION216.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 216 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION216.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region216 as exempt
idau.IDAU_REGION216.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region216
idau.IDAU_REGION216.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 216 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION217.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region217
idau.IDAU_REGION217.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 217 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION217.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region217 as exempt
idau.IDAU_REGION217.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region217
idau.IDAU_REGION217.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 217 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION218.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region218
idau.IDAU_REGION218.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 218 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION218.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region218 as exempt
idau.IDAU_REGION218.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region218
idau.IDAU_REGION218.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 218 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION219.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region219
idau.IDAU_REGION219.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 219 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION219.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region219 as exempt
idau.IDAU_REGION219.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region219
idau.IDAU_REGION219.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 219 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION22.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region22
idau.IDAU_REGION22.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 22 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION22.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region22 as exempt
idau.IDAU_REGION22.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region22
idau.IDAU_REGION22.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 22 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION220.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region220
idau.IDAU_REGION220.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 220 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION220.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region220 as exempt
idau.IDAU_REGION220.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region220
idau.IDAU_REGION220.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 220 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION221.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region221
idau.IDAU_REGION221.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 221 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION221.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region221 as exempt
idau.IDAU_REGION221.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region221
idau.IDAU_REGION221.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 221 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION222.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region222
idau.IDAU_REGION222.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 222 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION222.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region222 as exempt
idau.IDAU_REGION222.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region222
idau.IDAU_REGION222.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 222 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION223.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region223
idau.IDAU_REGION223.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 223 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION223.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region223 as exempt
idau.IDAU_REGION223.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region223
idau.IDAU_REGION223.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 223 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION224.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region224
idau.IDAU_REGION224.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 224 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION224.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region224 as exempt
idau.IDAU_REGION224.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region224
idau.IDAU_REGION224.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 224 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION225.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region225
idau.IDAU_REGION225.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 225 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION225.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region225 as exempt
idau.IDAU_REGION225.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region225
idau.IDAU_REGION225.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 225 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION226.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region226
idau.IDAU_REGION226.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 226 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION226.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region226 as exempt
idau.IDAU_REGION226.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region226
idau.IDAU_REGION226.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 226 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION227.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region227
idau.IDAU_REGION227.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 227 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION227.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region227 as exempt
idau.IDAU_REGION227.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region227
idau.IDAU_REGION227.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 227 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION228.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region228
idau.IDAU_REGION228.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 228 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION228.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region228 as exempt
idau.IDAU_REGION228.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region228
idau.IDAU_REGION228.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 228 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION229.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region229
idau.IDAU_REGION229.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 229 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION229.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region229 as exempt
idau.IDAU_REGION229.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region229
idau.IDAU_REGION229.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 229 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION23.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region23
idau.IDAU_REGION23.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 23 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION23.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region23 as exempt
idau.IDAU_REGION23.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region23
idau.IDAU_REGION23.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 23 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION230.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region230
idau.IDAU_REGION230.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 230 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION230.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region230 as exempt
idau.IDAU_REGION230.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region230
idau.IDAU_REGION230.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 230 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION231.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region231
idau.IDAU_REGION231.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 231 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION231.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region231 as exempt
idau.IDAU_REGION231.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region231
idau.IDAU_REGION231.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 231 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION232.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region232
idau.IDAU_REGION232.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 232 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION232.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region232 as exempt
idau.IDAU_REGION232.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region232
idau.IDAU_REGION232.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 232 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION233.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region233
idau.IDAU_REGION233.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 233 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION233.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region233 as exempt
idau.IDAU_REGION233.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region233
idau.IDAU_REGION233.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 233 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION234.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region234
idau.IDAU_REGION234.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 234 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION234.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region234 as exempt
idau.IDAU_REGION234.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region234
idau.IDAU_REGION234.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 234 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION235.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region235
idau.IDAU_REGION235.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 235 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION235.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region235 as exempt
idau.IDAU_REGION235.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region235
idau.IDAU_REGION235.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 235 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION236.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region236
idau.IDAU_REGION236.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 236 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION236.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region236 as exempt
idau.IDAU_REGION236.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region236
idau.IDAU_REGION236.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 236 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION237.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region237
idau.IDAU_REGION237.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 237 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION237.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region237 as exempt
idau.IDAU_REGION237.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region237
idau.IDAU_REGION237.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 237 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION238.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region238
idau.IDAU_REGION238.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 238 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION238.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region238 as exempt
idau.IDAU_REGION238.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region238
idau.IDAU_REGION238.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 238 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION239.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region239
idau.IDAU_REGION239.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 239 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION239.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region239 as exempt
idau.IDAU_REGION239.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region239
idau.IDAU_REGION239.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 239 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION24.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region24
idau.IDAU_REGION24.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 24 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION24.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region24 as exempt
idau.IDAU_REGION24.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region24
idau.IDAU_REGION24.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 24 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION240.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region240
idau.IDAU_REGION240.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 240 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION240.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region240 as exempt
idau.IDAU_REGION240.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region240
idau.IDAU_REGION240.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 240 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION241.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region241
idau.IDAU_REGION241.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 241 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION241.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region241 as exempt
idau.IDAU_REGION241.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region241
idau.IDAU_REGION241.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 241 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION242.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region242
idau.IDAU_REGION242.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 242 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION242.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region242 as exempt
idau.IDAU_REGION242.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region242
idau.IDAU_REGION242.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 242 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION243.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region243
idau.IDAU_REGION243.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 243 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION243.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region243 as exempt
idau.IDAU_REGION243.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region243
idau.IDAU_REGION243.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 243 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION244.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region244
idau.IDAU_REGION244.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 244 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION244.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region244 as exempt
idau.IDAU_REGION244.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region244
idau.IDAU_REGION244.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 244 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION245.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region245
idau.IDAU_REGION245.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 245 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION245.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region245 as exempt
idau.IDAU_REGION245.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region245
idau.IDAU_REGION245.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 245 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION246.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region246
idau.IDAU_REGION246.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 246 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION246.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region246 as exempt
idau.IDAU_REGION246.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region246
idau.IDAU_REGION246.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 246 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION247.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region247
idau.IDAU_REGION247.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 247 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION247.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region247 as exempt
idau.IDAU_REGION247.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region247
idau.IDAU_REGION247.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 247 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION248.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region248
idau.IDAU_REGION248.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 248 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION248.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region248 as exempt
idau.IDAU_REGION248.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region248
idau.IDAU_REGION248.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 248 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION249.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region249
idau.IDAU_REGION249.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 249 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION249.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region249 as exempt
idau.IDAU_REGION249.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region249
idau.IDAU_REGION249.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 249 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION25.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region25
idau.IDAU_REGION25.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 25 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION25.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region25 as exempt
idau.IDAU_REGION25.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region25
idau.IDAU_REGION25.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 25 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION250.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region250
idau.IDAU_REGION250.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 250 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION250.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region250 as exempt
idau.IDAU_REGION250.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region250
idau.IDAU_REGION250.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 250 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION251.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region251
idau.IDAU_REGION251.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 251 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION251.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region251 as exempt
idau.IDAU_REGION251.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region251
idau.IDAU_REGION251.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 251 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION252.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region252
idau.IDAU_REGION252.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 252 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION252.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region252 as exempt
idau.IDAU_REGION252.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region252
idau.IDAU_REGION252.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 252 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION253.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region253
idau.IDAU_REGION253.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 253 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION253.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region253 as exempt
idau.IDAU_REGION253.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region253
idau.IDAU_REGION253.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 253 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION254.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region254
idau.IDAU_REGION254.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 254 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION254.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region254 as exempt
idau.IDAU_REGION254.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region254
idau.IDAU_REGION254.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 254 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION255.BADDR=0                           # (int   , init-time) default = '0x0'    : Base address of IDAU region255
idau.IDAU_REGION255.ENABLE=0                          # (bool  , init-time) default = '0'      : Controls if region 255 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION255.EXEMPT=0                          # (bool  , init-time) default = '0'      : Mark IDAU region255 as exempt
idau.IDAU_REGION255.LADDR=0                           # (int   , init-time) default = '0x0'    : Limit address of IDAU region255
idau.IDAU_REGION255.NSC=0                             # (bool  , init-time) default = '0'      : Controls if region 255 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION26.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region26
idau.IDAU_REGION26.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 26 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION26.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region26 as exempt
idau.IDAU_REGION26.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region26
idau.IDAU_REGION26.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 26 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION27.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region27
idau.IDAU_REGION27.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 27 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION27.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region27 as exempt
idau.IDAU_REGION27.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region27
idau.IDAU_REGION27.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 27 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION28.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region28
idau.IDAU_REGION28.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 28 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION28.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region28 as exempt
idau.IDAU_REGION28.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region28
idau.IDAU_REGION28.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 28 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION29.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region29
idau.IDAU_REGION29.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 29 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION29.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region29 as exempt
idau.IDAU_REGION29.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region29
idau.IDAU_REGION29.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 29 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION3.EXEMPT=0                            # (bool  , init-time) default = '0'      : Mark IDAU region3 as exempt
idau.IDAU_REGION30.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region30
idau.IDAU_REGION30.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 30 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION30.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region30 as exempt
idau.IDAU_REGION30.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region30
idau.IDAU_REGION30.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 30 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION31.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region31
idau.IDAU_REGION31.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 31 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION31.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region31 as exempt
idau.IDAU_REGION31.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region31
idau.IDAU_REGION31.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 31 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION32.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region32
idau.IDAU_REGION32.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 32 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION32.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region32 as exempt
idau.IDAU_REGION32.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region32
idau.IDAU_REGION32.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 32 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION33.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region33
idau.IDAU_REGION33.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 33 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION33.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region33 as exempt
idau.IDAU_REGION33.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region33
idau.IDAU_REGION33.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 33 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION34.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region34
idau.IDAU_REGION34.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 34 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION34.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region34 as exempt
idau.IDAU_REGION34.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region34
idau.IDAU_REGION34.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 34 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION35.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region35
idau.IDAU_REGION35.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 35 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION35.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region35 as exempt
idau.IDAU_REGION35.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region35
idau.IDAU_REGION35.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 35 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION36.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region36
idau.IDAU_REGION36.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 36 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION36.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region36 as exempt
idau.IDAU_REGION36.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region36
idau.IDAU_REGION36.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 36 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION37.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region37
idau.IDAU_REGION37.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 37 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION37.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region37 as exempt
idau.IDAU_REGION37.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region37
idau.IDAU_REGION37.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 37 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION38.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region38
idau.IDAU_REGION38.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 38 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION38.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region38 as exempt
idau.IDAU_REGION38.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region38
idau.IDAU_REGION38.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 38 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION39.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region39
idau.IDAU_REGION39.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 39 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION39.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region39 as exempt
idau.IDAU_REGION39.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region39
idau.IDAU_REGION39.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 39 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION4.EXEMPT=0                            # (bool  , init-time) default = '0'      : Mark IDAU region4 as exempt
idau.IDAU_REGION40.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region40
idau.IDAU_REGION40.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 40 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION40.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region40 as exempt
idau.IDAU_REGION40.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region40
idau.IDAU_REGION40.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 40 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION41.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region41
idau.IDAU_REGION41.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 41 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION41.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region41 as exempt
idau.IDAU_REGION41.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region41
idau.IDAU_REGION41.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 41 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION42.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region42
idau.IDAU_REGION42.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 42 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION42.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region42 as exempt
idau.IDAU_REGION42.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region42
idau.IDAU_REGION42.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 42 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION43.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region43
idau.IDAU_REGION43.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 43 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION43.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region43 as exempt
idau.IDAU_REGION43.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region43
idau.IDAU_REGION43.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 43 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION44.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region44
idau.IDAU_REGION44.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 44 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION44.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region44 as exempt
idau.IDAU_REGION44.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region44
idau.IDAU_REGION44.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 44 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION45.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region45
idau.IDAU_REGION45.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 45 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION45.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region45 as exempt
idau.IDAU_REGION45.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region45
idau.IDAU_REGION45.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 45 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION46.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region46
idau.IDAU_REGION46.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 46 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION46.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region46 as exempt
idau.IDAU_REGION46.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region46
idau.IDAU_REGION46.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 46 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION47.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region47
idau.IDAU_REGION47.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 47 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION47.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region47 as exempt
idau.IDAU_REGION47.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region47
idau.IDAU_REGION47.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 47 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION48.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region48
idau.IDAU_REGION48.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 48 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION48.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region48 as exempt
idau.IDAU_REGION48.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region48
idau.IDAU_REGION48.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 48 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION49.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region49
idau.IDAU_REGION49.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 49 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION49.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region49 as exempt
idau.IDAU_REGION49.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region49
idau.IDAU_REGION49.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 49 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION5.EXEMPT=0                            # (bool  , init-time) default = '0'      : Mark IDAU region5 as exempt
idau.IDAU_REGION50.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region50
idau.IDAU_REGION50.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 50 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION50.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region50 as exempt
idau.IDAU_REGION50.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region50
idau.IDAU_REGION50.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 50 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION51.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region51
idau.IDAU_REGION51.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 51 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION51.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region51 as exempt
idau.IDAU_REGION51.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region51
idau.IDAU_REGION51.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 51 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION52.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region52
idau.IDAU_REGION52.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 52 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION52.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region52 as exempt
idau.IDAU_REGION52.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region52
idau.IDAU_REGION52.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 52 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION53.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region53
idau.IDAU_REGION53.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 53 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION53.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region53 as exempt
idau.IDAU_REGION53.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region53
idau.IDAU_REGION53.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 53 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION54.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region54
idau.IDAU_REGION54.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 54 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION54.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region54 as exempt
idau.IDAU_REGION54.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region54
idau.IDAU_REGION54.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 54 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION55.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region55
idau.IDAU_REGION55.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 55 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION55.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region55 as exempt
idau.IDAU_REGION55.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region55
idau.IDAU_REGION55.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 55 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION56.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region56
idau.IDAU_REGION56.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 56 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION56.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region56 as exempt
idau.IDAU_REGION56.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region56
idau.IDAU_REGION56.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 56 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION57.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region57
idau.IDAU_REGION57.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 57 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION57.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region57 as exempt
idau.IDAU_REGION57.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region57
idau.IDAU_REGION57.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 57 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION58.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region58
idau.IDAU_REGION58.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 58 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION58.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region58 as exempt
idau.IDAU_REGION58.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region58
idau.IDAU_REGION58.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 58 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION59.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region59
idau.IDAU_REGION59.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 59 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION59.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region59 as exempt
idau.IDAU_REGION59.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region59
idau.IDAU_REGION59.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 59 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION6.EXEMPT=0                            # (bool  , init-time) default = '0'      : Mark IDAU region6 as exempt
idau.IDAU_REGION60.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region60
idau.IDAU_REGION60.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 60 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION60.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region60 as exempt
idau.IDAU_REGION60.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region60
idau.IDAU_REGION60.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 60 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION61.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region61
idau.IDAU_REGION61.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 61 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION61.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region61 as exempt
idau.IDAU_REGION61.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region61
idau.IDAU_REGION61.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 61 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION62.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region62
idau.IDAU_REGION62.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 62 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION62.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region62 as exempt
idau.IDAU_REGION62.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region62
idau.IDAU_REGION62.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 62 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION63.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region63
idau.IDAU_REGION63.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 63 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION63.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region63 as exempt
idau.IDAU_REGION63.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region63
idau.IDAU_REGION63.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 63 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION64.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region64
idau.IDAU_REGION64.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 64 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION64.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region64 as exempt
idau.IDAU_REGION64.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region64
idau.IDAU_REGION64.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 64 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION65.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region65
idau.IDAU_REGION65.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 65 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION65.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region65 as exempt
idau.IDAU_REGION65.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region65
idau.IDAU_REGION65.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 65 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION66.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region66
idau.IDAU_REGION66.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 66 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION66.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region66 as exempt
idau.IDAU_REGION66.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region66
idau.IDAU_REGION66.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 66 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION67.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region67
idau.IDAU_REGION67.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 67 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION67.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region67 as exempt
idau.IDAU_REGION67.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region67
idau.IDAU_REGION67.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 67 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION68.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region68
idau.IDAU_REGION68.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 68 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION68.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region68 as exempt
idau.IDAU_REGION68.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region68
idau.IDAU_REGION68.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 68 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION69.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region69
idau.IDAU_REGION69.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 69 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION69.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region69 as exempt
idau.IDAU_REGION69.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region69
idau.IDAU_REGION69.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 69 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION7.EXEMPT=0                            # (bool  , init-time) default = '0'      : Mark IDAU region7 as exempt
idau.IDAU_REGION70.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region70
idau.IDAU_REGION70.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 70 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION70.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region70 as exempt
idau.IDAU_REGION70.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region70
idau.IDAU_REGION70.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 70 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION71.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region71
idau.IDAU_REGION71.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 71 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION71.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region71 as exempt
idau.IDAU_REGION71.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region71
idau.IDAU_REGION71.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 71 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION72.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region72
idau.IDAU_REGION72.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 72 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION72.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region72 as exempt
idau.IDAU_REGION72.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region72
idau.IDAU_REGION72.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 72 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION73.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region73
idau.IDAU_REGION73.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 73 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION73.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region73 as exempt
idau.IDAU_REGION73.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region73
idau.IDAU_REGION73.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 73 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION74.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region74
idau.IDAU_REGION74.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 74 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION74.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region74 as exempt
idau.IDAU_REGION74.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region74
idau.IDAU_REGION74.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 74 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION75.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region75
idau.IDAU_REGION75.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 75 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION75.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region75 as exempt
idau.IDAU_REGION75.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region75
idau.IDAU_REGION75.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 75 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION76.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region76
idau.IDAU_REGION76.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 76 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION76.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region76 as exempt
idau.IDAU_REGION76.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region76
idau.IDAU_REGION76.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 76 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION77.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region77
idau.IDAU_REGION77.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 77 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION77.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region77 as exempt
idau.IDAU_REGION77.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region77
idau.IDAU_REGION77.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 77 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION78.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region78
idau.IDAU_REGION78.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 78 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION78.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region78 as exempt
idau.IDAU_REGION78.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region78
idau.IDAU_REGION78.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 78 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION79.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region79
idau.IDAU_REGION79.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 79 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION79.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region79 as exempt
idau.IDAU_REGION79.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region79
idau.IDAU_REGION79.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 79 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION8.EXEMPT=0                            # (bool  , init-time) default = '0'      : Mark IDAU region8 as exempt
idau.IDAU_REGION80.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region80
idau.IDAU_REGION80.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 80 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION80.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region80 as exempt
idau.IDAU_REGION80.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region80
idau.IDAU_REGION80.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 80 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION81.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region81
idau.IDAU_REGION81.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 81 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION81.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region81 as exempt
idau.IDAU_REGION81.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region81
idau.IDAU_REGION81.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 81 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION82.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region82
idau.IDAU_REGION82.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 82 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION82.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region82 as exempt
idau.IDAU_REGION82.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region82
idau.IDAU_REGION82.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 82 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION83.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region83
idau.IDAU_REGION83.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 83 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION83.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region83 as exempt
idau.IDAU_REGION83.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region83
idau.IDAU_REGION83.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 83 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION84.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region84
idau.IDAU_REGION84.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 84 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION84.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region84 as exempt
idau.IDAU_REGION84.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region84
idau.IDAU_REGION84.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 84 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION85.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region85
idau.IDAU_REGION85.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 85 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION85.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region85 as exempt
idau.IDAU_REGION85.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region85
idau.IDAU_REGION85.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 85 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION86.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region86
idau.IDAU_REGION86.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 86 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION86.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region86 as exempt
idau.IDAU_REGION86.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region86
idau.IDAU_REGION86.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 86 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION87.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region87
idau.IDAU_REGION87.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 87 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION87.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region87 as exempt
idau.IDAU_REGION87.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region87
idau.IDAU_REGION87.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 87 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION88.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region88
idau.IDAU_REGION88.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 88 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION88.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region88 as exempt
idau.IDAU_REGION88.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region88
idau.IDAU_REGION88.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 88 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION89.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region89
idau.IDAU_REGION89.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 89 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION89.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region89 as exempt
idau.IDAU_REGION89.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region89
idau.IDAU_REGION89.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 89 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION9.EXEMPT=0                            # (bool  , init-time) default = '0'      : Mark IDAU region9 as exempt
idau.IDAU_REGION90.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region90
idau.IDAU_REGION90.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 90 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION90.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region90 as exempt
idau.IDAU_REGION90.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region90
idau.IDAU_REGION90.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 90 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION91.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region91
idau.IDAU_REGION91.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 91 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION91.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region91 as exempt
idau.IDAU_REGION91.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region91
idau.IDAU_REGION91.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 91 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION92.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region92
idau.IDAU_REGION92.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 92 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION92.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region92 as exempt
idau.IDAU_REGION92.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region92
idau.IDAU_REGION92.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 92 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION93.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region93
idau.IDAU_REGION93.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 93 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION93.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region93 as exempt
idau.IDAU_REGION93.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region93
idau.IDAU_REGION93.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 93 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION94.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region94
idau.IDAU_REGION94.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 94 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION94.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region94 as exempt
idau.IDAU_REGION94.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region94
idau.IDAU_REGION94.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 94 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION95.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region95
idau.IDAU_REGION95.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 95 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION95.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region95 as exempt
idau.IDAU_REGION95.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region95
idau.IDAU_REGION95.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 95 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION96.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region96
idau.IDAU_REGION96.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 96 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION96.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region96 as exempt
idau.IDAU_REGION96.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region96
idau.IDAU_REGION96.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 96 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION97.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region97
idau.IDAU_REGION97.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 97 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION97.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region97 as exempt
idau.IDAU_REGION97.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region97
idau.IDAU_REGION97.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 97 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION98.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region98
idau.IDAU_REGION98.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 98 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION98.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region98 as exempt
idau.IDAU_REGION98.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region98
idau.IDAU_REGION98.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 98 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.IDAU_REGION99.BADDR=0                            # (int   , init-time) default = '0x0'    : Base address of IDAU region99
idau.IDAU_REGION99.ENABLE=0                           # (bool  , init-time) default = '0'      : Controls if region 99 is S or NS, only valid when NSC=0. If NSC=1 this parameter is ignored. 1 = region is NS, 0 = region is S (absent if LADDR=0)
idau.IDAU_REGION99.EXEMPT=0                           # (bool  , init-time) default = '0'      : Mark IDAU region99 as exempt
idau.IDAU_REGION99.LADDR=0                            # (int   , init-time) default = '0x0'    : Limit address of IDAU region99
idau.IDAU_REGION99.NSC=0                              # (bool  , init-time) default = '0'      : Controls if region 99 is NSC. 1 = IDAU region is NSC, 0 = ENABLE parameter determines if S or NS.
idau.NUM_IDAU_REGION=18                               # (int   , init-time) default = '0x12'   : 
#------------------------------------------------------------------------------

Info: /OSCI/SystemC: Simulation stopped by user.
